apiVersion: batch/v1
kind: Job
metadata:
  name: apphub-postgres-bootstrap
  labels:
    app.kubernetes.io/name: apphub-postgres-bootstrap
    app.kubernetes.io/part-of: apphub-infra
spec:
  backoffLimit: 5
  template:
    metadata:
      labels:
        app.kubernetes.io/name: apphub-postgres-bootstrap
        app.kubernetes.io/part-of: apphub-infra
    spec:
      restartPolicy: OnFailure
      containers:
        - name: schema-bootstrap
          image: postgres:15.5-alpine
          imagePullPolicy: IfNotPresent
          env:
            - name: PGHOST
              value: apphub-postgres
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: postgres
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: apphub-postgres-superuser
                  key: POSTGRES_PASSWORD
            - name: PGDATABASE
              value: postgres
          command:
            - sh
          args:
            - -ec
            - |
              set -euo pipefail

              until pg_isready -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" >/dev/null 2>&1; do
                echo "Waiting for Postgres to accept connections..."
                sleep 3
              done

              echo "Ensuring apphub role exists..."
              if ! psql -tAc "SELECT 1 FROM pg_roles WHERE rolname = 'apphub'" | grep -q 1; then
                psql -v ON_ERROR_STOP=1 -c "CREATE ROLE apphub WITH LOGIN PASSWORD 'apphub'";
              else
                psql -v ON_ERROR_STOP=1 -c "ALTER ROLE apphub WITH LOGIN PASSWORD 'apphub'";
              fi

              echo "Ensuring apphub database exists..."
              if ! psql -tAc "SELECT 1 FROM pg_database WHERE datname = 'apphub'" | grep -q 1; then
                psql -v ON_ERROR_STOP=1 -c "CREATE DATABASE apphub OWNER apphub";
              fi

              owner=$(psql -tAc "SELECT rolname FROM pg_roles r JOIN pg_database d ON r.oid = d.datdba WHERE d.datname = 'apphub'" | tr -d '[:space:]')
              if [ -n "${owner}" ] && [ "${owner}" != "apphub" ]; then
                psql -v ON_ERROR_STOP=1 -c "ALTER DATABASE apphub OWNER TO apphub";
              fi

              echo "Ensuring schemas exist..."
              for schema in metastore filestore timestore; do
                psql -v ON_ERROR_STOP=1 -d apphub -c "CREATE SCHEMA IF NOT EXISTS ${schema} AUTHORIZATION apphub";
              done

              echo "Ensuring core extensions exist..."
              psql -v ON_ERROR_STOP=1 -d apphub -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"";
              psql -v ON_ERROR_STOP=1 -d apphub -c "CREATE EXTENSION IF NOT EXISTS pgcrypto";

              echo "Postgres bootstrap complete."
