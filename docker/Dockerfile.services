# syntax=docker/dockerfile:1.9

FROM node:24 AS workspace-deps
WORKDIR /app

ARG TARGETPLATFORM

COPY package.json package-lock.json ./
COPY tsconfig.json tsconfig.json
COPY tsconfig.base.json tsconfig.base.json

COPY apps/frontend/package.json apps/frontend/
COPY apps/cli/package.json apps/cli/
COPY apps/cli/package-lock.json apps/cli/
COPY services/core/package.json services/core/
COPY services/metastore/package.json services/metastore/
COPY services/timestore/package.json services/timestore/
COPY services/filestore/package.json services/filestore/
COPY packages/shared/package.json packages/shared/
COPY packages/filestore-client/package.json packages/filestore-client/
COPY packages/event-bus/package.json packages/event-bus/
COPY packages/filestore-cli/package.json packages/filestore-cli/
COPY packages/docker-mock/package.json packages/docker-mock/
COPY packages/kubectl-mock/package.json packages/kubectl-mock/
RUN --mount=type=cache,id=npm-${TARGETPLATFORM},target=/root/.npm npm ci

RUN set -eux; \
    install_optional() { \
      parent_pkg="$1"; \
      optional_pkg="$2"; \
      dest_dir="${3:-node_modules/${optional_pkg}}"; \
      if [ -d "${dest_dir}" ]; then \
        return 0; \
      fi; \
      version="$(PARENT_NAME="${parent_pkg}" OPTIONAL_NAME="${optional_pkg}" node -e "const lock = require('./package-lock.json'); const entry = lock.packages['node_modules/' + process.env.PARENT_NAME]; const version = entry && entry.optionalDependencies && entry.optionalDependencies[process.env.OPTIONAL_NAME]; if (!version) { throw new Error('Missing optional dependency metadata for ' + process.env.OPTIONAL_NAME); } process.stdout.write(version);")"; \
      tarball_url="https://registry.npmjs.org/${optional_pkg}/-/$(basename "${optional_pkg}")-${version}.tgz"; \
      temp_dir="$(mktemp -d)"; \
      curl -fsSL "${tarball_url}" | tar -xz -C "${temp_dir}"; \
      mkdir -p "$(dirname "${dest_dir}")"; \
      rm -rf "${dest_dir}"; \
      mv "${temp_dir}/package" "${dest_dir}"; \
      rm -rf "${temp_dir}"; \
    }; \
    case "${TARGETPLATFORM}" in \
      "linux/arm64") \
        install_optional "rollup" "@rollup/rollup-linux-arm64-gnu"; \
        install_optional "lightningcss" "lightningcss-linux-arm64-gnu"; \
        install_optional "esbuild" "@esbuild/linux-arm64"; \
        install_optional "tsx/node_modules/esbuild" "@esbuild/linux-arm64" "node_modules/tsx/node_modules/@esbuild/linux-arm64"; \
        ;; \
      "linux/amd64") \
        install_optional "rollup" "@rollup/rollup-linux-x64-gnu"; \
        install_optional "lightningcss" "lightningcss-linux-x64-gnu"; \
        install_optional "esbuild" "@esbuild/linux-x64"; \
        install_optional "tsx/node_modules/esbuild" "@esbuild/linux-x64" "node_modules/tsx/node_modules/@esbuild/linux-x64"; \
        ;; \
    esac

FROM workspace-deps AS builder
ARG VITE_API_BASE_URL=http://localhost:4000
ARG VITE_DEMO_OPERATOR_TOKEN=
ARG VITE_STREAMING_CONSOLE_URL=http://localhost:28000
ARG VITE_MINIO_CONSOLE_URL=http://localhost:9401
ARG VITE_EXTERNAL_CONSOLES=
ENV VITE_API_BASE_URL=${VITE_API_BASE_URL}
ENV VITE_DEMO_OPERATOR_TOKEN=${VITE_DEMO_OPERATOR_TOKEN}
ENV VITE_STREAMING_CONSOLE_URL=${VITE_STREAMING_CONSOLE_URL}
ENV VITE_MINIO_CONSOLE_URL=${VITE_MINIO_CONSOLE_URL}
ENV VITE_EXTERNAL_CONSOLES=${VITE_EXTERNAL_CONSOLES}
ENV REDIS_URL=redis://redis:6379

COPY . .

RUN npm run build --workspace @apphub/core \
 && npm run build --workspace @apphub/metastore \
 && npm run build:bundle --workspace @apphub/frontend \
 && npm run build --workspace @apphub/timestore \
 && npm run build --workspace @apphub/filestore \
 && npm run build --workspace @apphub/filestore-client \
 && npm run build --workspace @apphub/streaming \
 && npm run build --workspace @apphub/module-toolkit \
 && npm run build --workspace @apphub/observatory-module \
 && npm run build --workspace @apphub/cli

RUN npm prune --omit=dev

RUN set -eux; \
    install_optional() { \
      parent_pkg="$1"; \
      optional_pkg="$2"; \
      dest_dir="${3:-node_modules/${optional_pkg}}"; \
      if [ -d "${dest_dir}" ]; then \
        return 0; \
      fi; \
      version="$(PARENT_NAME="${parent_pkg}" OPTIONAL_NAME="${optional_pkg}" node -e "const lock = require('./package-lock.json'); const entry = lock.packages['node_modules/' + process.env.PARENT_NAME]; const version = entry && entry.optionalDependencies && entry.optionalDependencies[process.env.OPTIONAL_NAME]; if (!version) { throw new Error('Missing optional dependency metadata for ' + process.env.OPTIONAL_NAME); } process.stdout.write(version);")"; \
      tarball_url="https://registry.npmjs.org/${optional_pkg}/-/$(basename "${optional_pkg}")-${version}.tgz"; \
      temp_dir="$(mktemp -d)"; \
      curl -fsSL "${tarball_url}" | tar -xz -C "${temp_dir}"; \
      mkdir -p "$(dirname "${dest_dir}")"; \
      rm -rf "${dest_dir}"; \
      mv "${temp_dir}/package" "${dest_dir}"; \
      rm -rf "${temp_dir}"; \
    }; \
    case "${TARGETPLATFORM}" in \
      "linux/arm64") \
        install_optional "rollup" "@rollup/rollup-linux-arm64-gnu"; \
        install_optional "lightningcss" "lightningcss-linux-arm64-gnu"; \
        install_optional "esbuild" "@esbuild/linux-arm64"; \
        install_optional "tsx/node_modules/esbuild" "@esbuild/linux-arm64" "node_modules/tsx/node_modules/@esbuild/linux-arm64"; \
        ;; \
      "linux/amd64") \
        install_optional "rollup" "@rollup/rollup-linux-x64-gnu"; \
        install_optional "lightningcss" "lightningcss-linux-x64-gnu"; \
        install_optional "esbuild" "@esbuild/linux-x64"; \
        install_optional "tsx/node_modules/esbuild" "@esbuild/linux-x64" "node_modules/tsx/node_modules/@esbuild/linux-x64"; \
        ;; \
    esac

# Remove nested node_modules copies to keep runtime layers small
RUN find services -maxdepth 2 -type d -name node_modules -prune -exec rm -rf {} + \
 && find apps -maxdepth 2 -type d -name node_modules -prune -exec rm -rf {} + \
 && find packages -maxdepth 2 -type d -name node_modules -prune -exec rm -rf {} + \
 && find modules -maxdepth 2 -type d -name node_modules -prune -exec rm -rf {} +

# Common runtime base with shared node_modules and packages
FROM node:24-slim AS runtime-base
WORKDIR /app
ENV NODE_ENV=production

ARG KUBECTL_VERSION=v1.29.3
ARG HELM_VERSION=v3.14.4

RUN set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends bash ca-certificates curl gnupg tar gzip; \
    rm -rf /var/lib/apt/lists/*; \
    arch="$(dpkg --print-architecture)"; \
    case "${arch}" in \
      amd64) kubearch=amd64 ;; \
      arm64) kubearch=arm64 ;; \
      *) echo "Unsupported architecture: ${arch}" >&2; exit 1 ;; \
    esac; \
    curl -fsSLo /usr/local/bin/kubectl "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/${kubearch}/kubectl"; \
    curl -fsSLo /tmp/kubectl.sha256 "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/${kubearch}/kubectl.sha256"; \
    echo "$(cat /tmp/kubectl.sha256)  /usr/local/bin/kubectl" | sha256sum -c -; \
    chmod 0555 /usr/local/bin/kubectl; \
    rm -f /tmp/kubectl.sha256; \
    tmpdir="$(mktemp -d)"; \
    helm_archive=helm-${HELM_VERSION}-linux-${kubearch}.tar.gz; \
    curl -fsSLo "${tmpdir}/${helm_archive}" "https://get.helm.sh/${helm_archive}"; \
    curl -fsSLo "${tmpdir}/${helm_archive}.sha256sum" "https://get.helm.sh/${helm_archive}.sha256sum"; \
    (cd "${tmpdir}" && sha256sum -c ${helm_archive}.sha256sum); \
    tar -xzf "${tmpdir}/${helm_archive}" -C "${tmpdir}"; \
    install -m 0555 "${tmpdir}/linux-${kubearch}/helm" /usr/local/bin/helm; \
    rm -rf "${tmpdir}"; \
    npm install -g tsx

COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/packages ./packages

# AppHub bootstrap runtime
FROM runtime-base AS apphub-bootstrap-runtime
COPY --from=builder /app/scripts/apphub-bootstrap.js ./scripts/apphub-bootstrap.js
ENTRYPOINT ["node", "scripts/apphub-bootstrap.js"]

# Streaming helper runtime
FROM runtime-base AS streaming-runtime
COPY --from=builder /app/services/streaming ./services/streaming

ENTRYPOINT ["npm"]
CMD ["run", "seed:sample", "--workspace", "@apphub/streaming"]

# Core runtime (API + workers share this image)
FROM runtime-base AS core-runtime
COPY --from=builder /app/services/core ./services/core
COPY --from=builder /app/apps/cli ./apps/cli
COPY --from=builder /app/modules ./modules

RUN chmod +x /app/services/core/scripts/core-runtime-entrypoint.sh

ENTRYPOINT ["/app/services/core/scripts/core-runtime-entrypoint.sh"]
CMD ["node", "services/core/dist/server.js"]

# Metastore API runtime
FROM runtime-base AS metastore-runtime
COPY --from=builder /app/services/metastore ./services/metastore

ENTRYPOINT ["node"]
CMD ["services/metastore/dist/server.js"]

# Filestore API / worker runtime
FROM runtime-base AS filestore-runtime
COPY --from=builder /app/services/filestore ./services/filestore

ENTRYPOINT ["node"]
CMD ["services/filestore/dist/server.js"]

# Timestore API / worker runtime
FROM runtime-base AS timestore-runtime
COPY --from=builder /app/services/timestore ./services/timestore

ENTRYPOINT ["node"]
CMD ["services/timestore/dist/server.js"]

# Frontend static assets served via nginx
FROM nginx:1.27-alpine AS frontend-runtime
COPY docker/frontend.nginx.conf /etc/nginx/conf.d/default.conf
COPY --from=builder /app/apps/frontend/dist /usr/share/nginx/html
