{
  "workflow": {
    "slug": "sync-inventory",
    "name": "Sync inventory and notify",
    "description": "Fetch inventory, apply delta sync, and reuse notification job",
    "steps": [
      {
        "id": "fetch-existing",
        "name": "Fetch inventory snapshot",
        "type": "job",
        "jobSlug": "inventory-fetcher"
      },
      {
        "id": "sync-delta",
        "name": "Sync new inventory items",
        "type": "job",
        "jobSlug": "inventory-sync-delta",
        "dependsOn": ["fetch-existing"],
        "storeResultAs": "deltaResult"
      },
      {
        "id": "notify",
        "name": "Notify stakeholders",
        "type": "job",
        "jobSlug": "notification-email",
        "dependsOn": ["sync-delta"],
        "parameters": {
          "subject": "Inventory sync completed",
          "body": "Processed latest inventory delta."
        }
      }
    ]
  },
  "dependencies": [
    {
      "kind": "existing-job",
      "jobSlug": "inventory-fetcher",
      "name": "Inventory fetcher",
      "description": "Reads the current inventory state from the ERP and returns a snapshot for downstream steps.",
      "rationale": "Reuse the existing fetcher job so the AI-generated plan relies on vetted integration code."
    },
    {
      "kind": "job-with-bundle",
      "jobSlug": "inventory-sync-delta",
      "name": "Inventory delta sync",
      "summary": "Applies incoming delta payloads to the catalog database, emitting a structured result.",
      "prompt": "Generate a Node batch job that ingests an inventory delta JSON file, applies inserts/updates, and returns the counts processed.",
      "rationale": "No existing job applies deltas. This job will be generated next with its bundle.",
      "bundleOutline": {
        "entryPoint": "index.js",
        "capabilities": ["db.write", "fs"],
        "files": [
          {
            "path": "index.js",
            "description": "Entry point that loads the delta file, applies changes, and reports counts."
          }
        ],
        "manifestNotes": "Include name/version fields that match the job slug and expose the handler via module exports."
      }
    },
    {
      "kind": "existing-job",
      "jobSlug": "notification-email",
      "name": "Notification email",
      "description": "Delivers an email update summarising the sync results.",
      "rationale": "This catalog job already handles templated notifications; reuse it to avoid new bundles."
    }
  ],
  "notes": "After publishing the delta sync job and bundle, wire in the notification recipient list via the workflow parameters."
}
