---
import BaseLayout from '@layouts/BaseLayout.astro';
import {
  DataPlaneDiagram,
  DeploymentOptionsDiagram,
  EventBusDiagram,
  ModuleLifecycleDiagram,
  ObservatoryFlowDiagram,
  SystemArchitectureDiagram,
  UiGraphDiagram
} from '@components/diagrams';

const title = 'Osiris AppHub | Unified modular operations platform';
const description =
  'AppHub is the orchestration engine I always wanted: workflows, jobs, assets, and data services sharing a Redis + BullMQ bus with a live UI on top.';

const heroStats = [
  { label: 'Platform compass', value: 'Performance, scalability, flexibility - no trade-offs' },
  { label: 'Core loop', value: 'Workflows / jobs / events / triggers / schedules / assets' },
  { label: 'Data fabric', value: 'Filestore, Metastore, and Timestore stay in lockstep via the bus' }
];

const components = [
  {
    name: 'Orchestration engine',
    copy:
      'Temporal and Dagster showed the way, but I trimmed the fat. Modules wire workflows, jobs, events, triggers, schedules, and assets together while BullMQ keeps latency in the single-digit milliseconds.'
  },
  {
    name: 'Timestore',
    copy:
      'DuckDB plans buffer on a staging disk, flush into Parquet partitions, and scale out on object storage. ANSI SQL stays front and center whether you are querying minutes of telemetry or months of history.'
  },
  {
    name: 'Filestore',
    copy:
      'Every read or write goes through the service so we always know sizes, checksums, provenance, and which module touched a payload across S3, GCS, Azure, MinIO, or local disks.'
  },
  {
    name: 'Metastore',
    copy:
      'Postgres-backed document store that emits events whenever a document changes. Perfect for configuration, topology, and everything human-sized that still needs orchestration hooks.'
  },
  {
    name: 'Unified UI',
    copy:
      'React console streaming straight from the event bus. Graphs, SQL workspaces, asset inventories, and analytics land in one place, with Prometheus-ready metrics still exposed if you want Grafana.'
  }
];

const modulePrinciples = [
  {
    title: 'Wire the system you need',
    detail:
      'Workflow runs, cron schedules, event triggers, and asset auto-materialisation live side by side. Mix them per module and change course without asking platform teams for permission.'
  },
  {
    title: 'Modules stay flexible',
    detail:
      'Jobs, services, assets, events, and UI surfaces live in one bundle. Version it, promote it, or tear it apart when requirements shift.'
  },
  {
    title: 'Fast ergonomics',
    detail:
      'The TypeScript SDK exposes filestore, metastore, timestore, and event bus capabilities so authors write domain logic instead of plumbing.'
  }
];

const useCases = [
  {
    name: 'Observatory operations',
    summary:
      'Stream sensor events into Timestore, reconcile files through Filestore, and light up workflows the instant an asset refreshes.'
  },
  {
    name: 'Industrial runtime',
    summary:
      'Blend PLC telemetry, maintenance records, and operator feedback. Schedules cover steady-state tasks while events and asset freshness handle surprises.'
  },
  {
    name: 'Data product platform',
    summary:
      'Publish data assets backed by Timestore partitions, broadcast change notices with Metastore events, and let the UI visualise lineage automatically.'
  }
];

const dataHighlights = [
  'Staging first. Ingest lands on a fast disk, then flushes into Parquet partitions once thresholds hit so the hot path stays predictable while object storage scales.',
  'DuckDB everywhere. Queries hit ANSI SQL endpoints, lean on predicate pushdown, and can fan out horizontally thanks to partition-aware planning.',
  'Streaming ready. Kafka or any streaming pipe can drop records right into the flow while Filestore keeps file-like assets aligned with the same dataset.'
];

const orchestrationPoints = [
  'Redis plus BullMQ at the core. Events, triggers, workflows, and schedules ride the same low-latency bus.',
  'Asset auto-materialisation keeps modules fresh. Assets declare freshness rules, and the orchestrator reacts the moment data moves.',
  'Event hooks everywhere. Filestore and Metastore emit change events so modules react instantly without brittle polling.'
];

const uiHighlights = [
  'Live graph view. Every workflow, job, and asset overlays its status as the bus emits updates.',
  'Analytics built in. Inspect timestore partitions, file inventories, and metastore documents without leaving the console.',
  'Still pluggable. Prometheus metrics, structured logs, and traces escape so you keep external dashboards if you want them.'
];

const deploymentOptions = [
  {
    heading: 'Single machine',
    detail: 'Docker Compose or Minikube plus a small staging disk gives you the full stack and flushes to object storage as partitions mature.'
  },
  {
    heading: 'Cloud native',
    detail: 'Run services on Kubernetes with autoscaling workers. Object storage can be S3, GCS, or Azure while Redis and DuckDB scale independently.'
  },
  {
    heading: 'Hybrid topology',
    detail: 'Place ingestion next to data sources and keep the core in the cloud. The event bus and shared stores keep every module in sync.'
  }
];

const services = [
  {
    title: 'Deep-dive architecture sessions',
    detail:
      'Walk through orchestrator patterns, event trigger design, and how to map modules onto the stores without guesswork.'
  },
  {
    title: 'Module design sprints',
    detail:
      'Codify workflows, schedules, assets, and UI surfaces together so your first module launches with confidence.'
  },
  {
    title: 'Benchmark and scale reviews',
    detail:
      'Stress Timestore, measure Redis and BullMQ throughput, and tune the staging to Parquet pipeline before you bet your operations on it.'
  }
];

const observatoryTakeaways = [
  'Sensors post events onto the bus so workflows, schedules, and assets stay in sync.',
  'Filestore captures every file with metadata, checksums, and emits change events for downstream jobs.',
  'Metastore documents track sites and equipment; updates fire events so the right workflows adjust immediately.',
  'Timestore stages minute data on disk, flushes to Parquet, and responds to SQL in milliseconds thanks to DuckDB.',
  'The UI graph streams live status so operators drill into runs without refreshing dashboards.'
];
---
<BaseLayout title={title} description={description}>
  <section class="hero" aria-labelledby="hero-heading">
    <div class="container hero__inner">
      <div class="hero__content">
        <p class="hero__eyebrow">For operators who want it all</p>
        <h1 id="hero-heading">Build the operations platform I kept wishing existed.</h1>
        <p class="hero__summary">
          Osiris AppHub is a fast orchestration engine inspired by Temporal and Dagster but trimmed for real-world performance. Workflows, jobs, events, triggers, schedules, and assets live inside one module, all speaking over a low-latency Redis plus BullMQ bus while Filestore, Metastore, and Timestore listen in.
        </p>
        <div class="hero__status">
          <p>
            <strong>Heads-up:</strong> the unified UI is still rough around the edges. Please give the demo a spin anyway—the live graph view streams straight off the event bus.
          </p>
          <p>
            <strong>Early prototype:</strong> AppHub is pre-production and evolving in the open while I prove out performance, scalability, and flexibility. Production guidance will land once the community helps hammer on the entire loop.
          </p>
        </div>
        <div class="hero__actions">
          <a class="button button--primary" href="mailto:osirisapphub@gmail.com">Book a module workshop</a>
          <a class="button button--secondary" href="/technical">Review the technical brief</a>
          <a class="button button--ghost" href="https://demo.osiris-apphub.com" target="_blank" rel="noreferrer">Browse the live demo (read-only)</a>
          <a class="button button--ghost" href="https://github.com/benediktbwimmer/apphub" target="_blank" rel="noreferrer">View on GitHub</a>
          <a class="button button--ghost" href="https://discord.gg/STJGs5zHCN" target="_blank" rel="noreferrer">Join the Discord</a>
        </div>
        <div class="hero__contributor">
          <strong>Join the crew:</strong>
          <span>
            I am actively looking for collaborators across the stack—core services, SDKs, modules, and this site. If you want to load test Timestore, tune the orchestrator, or help polish the UI, email
            <a href="mailto:osirisapphub@gmail.com">osirisapphub@gmail.com</a>
            or hop into the
            <a href="https://discord.gg/STJGs5zHCN" target="_blank" rel="noreferrer">Discord server</a>.
          </span>
        </div>
        <dl class="hero__stats" aria-label="Current commitments">
          {heroStats.map((item) => (
            <div>
              <dt>{item.label}</dt>
              <dd>{item.value}</dd>
            </div>
          ))}
        </dl>
      </div>
      <figure class="hero__visual">
        <div class="diagram">
          <SystemArchitectureDiagram />
        </div>
        <figcaption>Redis and BullMQ sit at the centre so workflows, stores, and the UI stay in sync without bespoke glue.</figcaption>
      </figure>
    </div>
  </section>

  <section class="components" aria-labelledby="components-heading">
    <div class="container components__inner">
      <div class="section-header">
        <h2 id="components-heading" class="section-heading">Five services, one purpose-built platform</h2>
        <p>
          Every workspace ships the orchestrator plus Filestore, Metastore, Timestore, and the UI. They all speak over the same event bus so modules stay fast, observable, and ready to evolve.
        </p>
      </div>
      <div class="components__grid">
        {components.map((item) => (
          <article>
            <h3>{item.name}</h3>
            <p>{item.copy}</p>
          </article>
        ))}
      </div>
    </div>
  </section>

  <section class="modules" aria-labelledby="modules-heading">
    <div class="container modules__inner">
      <figure>
        <div class="diagram">
          <ModuleLifecycleDiagram />
        </div>
      </figure>
      <div>
        <h2 id="modules-heading" class="section-heading">Modules bundle workflows, jobs, events, and assets</h2>
        <div class="modules__grid">
          {modulePrinciples.map((item) => (
            <article>
              <h3>{item.title}</h3>
              <p>{item.detail}</p>
            </article>
          ))}
        </div>
        <p class="modules__footnote">
          The module SDK lives in <code>packages/module-sdk</code> and gives authors typed access to filestore, metastore, timestore, the event bus, and UI surfaces from a few lines of TypeScript.
        </p>
      </div>
    </div>
  </section>

  <section class="use-cases" aria-labelledby="use-cases-heading">
    <div class="container use-cases__inner">
      <h2 id="use-cases-heading" class="section-heading">Example modules we are proving out right now</h2>
      <div class="use-cases__grid">
        {useCases.map((item) => (
          <article>
            <h3>{item.name}</h3>
            <p>{item.summary}</p>
          </article>
        ))}
      </div>
    </div>
  </section>

  <section class="data-plane" aria-labelledby="data-plane-heading">
    <div class="container data-plane__inner">
      <div>
        <h2 id="data-plane-heading" class="section-heading">Timestore data plane built on object storage</h2>
        <p>
          Timestore is tuned for high-volume timeseries. It stages writes on disk, flushes to Parquet, and answers ANSI SQL through DuckDB without forcing a separate warehouse.
        </p>
        <ul>
          {dataHighlights.map((point) => (
            <li>{point}</li>
          ))}
        </ul>
      </div>
      <figure>
        <div class="diagram">
          <DataPlaneDiagram />
        </div>
      </figure>
    </div>
  </section>

  <section class="orchestration" aria-labelledby="orchestration-heading">
    <div class="container orchestration__inner">
      <figure>
        <div class="diagram">
          <EventBusDiagram />
        </div>
      </figure>
      <div>
        <h2 id="orchestration-heading" class="section-heading">Event-driven orchestration tuned for latency</h2>
        <p>
          The Redis plus BullMQ bus moves events, triggers, schedules, and asset materialisations with minimal overhead so modules react in real time.
        </p>
        <ul>
          {orchestrationPoints.map((point) => (
            <li>{point}</li>
          ))}
        </ul>
      </div>
    </div>
  </section>

  <section class="ui" aria-labelledby="ui-heading">
    <div class="container ui__inner">
      <div>
        <h2 id="ui-heading" class="section-heading">Unified UI with live graphs and analytics built in</h2>
        <p>
          The console blends real-time updates from the bus with polling where it still makes sense, so operators see fresh status without juggling dashboards.
        </p>
        <ul>
          {uiHighlights.map((point) => (
            <li>{point}</li>
          ))}
        </ul>
      </div>
      <figure>
        <div class="diagram">
          <UiGraphDiagram />
        </div>
      </figure>
    </div>
  </section>

  <section class="deploy" aria-labelledby="deploy-heading">
    <div class="container deploy__inner">
      <h2 id="deploy-heading" class="section-heading">Deploy it your way</h2>
      <div class="diagram">
        <DeploymentOptionsDiagram />
      </div>
      <div class="deploy__grid">
        {deploymentOptions.map((option) => (
          <article>
            <h3>{option.heading}</h3>
            <p>{option.detail}</p>
          </article>
        ))}
      </div>
      <p class="deploy__note">
        Redis, Postgres, staging disks, and object storage scale on their own timelines, so hybrid footprints—edge ingest, cloud analytics, active failover—stay in sync.
      </p>
    </div>
  </section>

  <section class="services" aria-labelledby="services-heading">
    <div class="container services__inner">
      <h2 id="services-heading" class="section-heading">Adoption services we are sketching</h2>
      <p class="services__intro">
        These tracks are still drafts while I harden the platform. Help shape them by contributing to the services, modules, and playbooks that will power launch day.
      </p>
      <div class="services__grid">
        {services.map((item) => (
          <article>
            <h3>{item.title}</h3>
            <p>{item.detail}</p>
          </article>
        ))}
      </div>
    </div>
  </section>

  <section class="observatory" aria-labelledby="observatory-heading">
    <div class="container observatory__inner">
      <div>
        <h2 id="observatory-heading" class="section-heading">Case study · Observatory module tying it all together</h2>
        <p class="observatory__intro">
          The environmental observatory module is built with the SDK end to end. It ingests telemetry, reconciles files, flushes timestore partitions, reacts to metastore updates, and renders live dashboards inside AppHub.
        </p>
        <ul>
          {observatoryTakeaways.map((item) => (
            <li>{item}</li>
          ))}
        </ul>
      </div>
      <figure>
        <div class="diagram">
          <ObservatoryFlowDiagram />
        </div>
      </figure>
    </div>
  </section>

  <section class="cta" aria-labelledby="cta-heading">
    <div class="container cta__inner">
      <div>
        <h2 id="cta-heading" class="section-heading">Help stress test the platform with the community</h2>
        <p>
          Clone the repo, explore existing modules, and see how the orchestrator behaves under real workloads. File issues, open pull requests, or partner with me if you want a turnkey build.
        </p>
      </div>
      <div class="cta__actions">
        <a class="button button--primary" href="https://github.com/benediktbwimmer/apphub" target="_blank" rel="noreferrer">Explore on GitHub</a>
        <a class="button button--ghost" href="mailto:osirisapphub@gmail.com">Plan a discovery session</a>
      </div>
    </div>
  </section>
</BaseLayout>

<style>
  .hero {
    padding: var(--apphub-spacing-3xl) 0;
    background: linear-gradient(140deg, rgba(13, 148, 136, 0.16), rgba(34, 211, 238, 0.12));
  }

  @media (prefers-color-scheme: dark) {
    .hero {
      background: linear-gradient(140deg, rgba(20, 184, 166, 0.24), rgba(94, 234, 212, 0.14));
    }
  }

  .hero__inner {
    display: grid;
    gap: var(--apphub-spacing-xl);
    align-items: center;
  }

  .hero__eyebrow {
    margin: 0;
    font-size: var(--apphub-typography-font-size-xs);
    letter-spacing: var(--apphub-typography-letter-spacing-wide);
    text-transform: uppercase;
    color: var(--apphub-color-text-soft);
    font-weight: var(--apphub-typography-font-weight-semibold);
  }

  .hero__summary {
    margin: 0;
    font-size: var(--apphub-typography-font-size-lg);
    color: var(--apphub-color-text-muted);
    max-width: 68ch;
  }

  .hero__status {
    margin-top: var(--apphub-spacing-md);
    display: grid;
    gap: var(--apphub-spacing-xxs);
    padding: var(--apphub-spacing-sm);
    border: 1px solid var(--apphub-color-border);
    border-radius: var(--apphub-radius-lg);
    background: var(--apphub-color-surface-muted);
    color: var(--apphub-color-text);
  }

  .hero__status p {
    margin: 0;
    font-size: var(--apphub-typography-font-size-sm);
  }

  .hero__actions {
    display: flex;
    flex-wrap: wrap;
    gap: var(--apphub-spacing-sm);
  }

  .hero__contributor {
    margin-top: var(--apphub-spacing-md);
    display: flex;
    flex-direction: column;
    gap: var(--apphub-spacing-xxs);
    font-size: var(--apphub-typography-font-size-sm);
    color: var(--apphub-color-text);
  }

  .hero__contributor a {
    color: var(--apphub-color-accent-strong);
  }

  .hero__stats {
    display: grid;
    gap: var(--apphub-spacing-sm);
    margin: var(--apphub-spacing-lg) 0 0;
  }

  .hero__stats dt {
    font-size: var(--apphub-typography-font-size-xs);
    letter-spacing: var(--apphub-typography-letter-spacing-wide);
    text-transform: uppercase;
    color: var(--apphub-color-text-soft);
  }

  .hero__stats dd {
    margin: 0;
    font-weight: var(--apphub-typography-font-weight-medium);
  }

  .hero__visual {
    margin: 0;
    display: grid;
    gap: var(--apphub-spacing-xxs);
    text-align: center;
  }

  .hero__visual .diagram svg {
    width: 100%;
    border-radius: var(--apphub-radius-xl);
    border: 1px solid var(--apphub-color-border);
    box-shadow: var(--apphub-shadow-soft);
    background: var(--apphub-color-surface);
  }

  .hero__visual figcaption {
    font-size: var(--apphub-typography-font-size-xs);
    color: var(--apphub-color-text-soft);
  }

  .section-header {
    display: grid;
    gap: var(--apphub-spacing-sm);
    margin-bottom: var(--apphub-spacing-xl);
    max-width: 72ch;
  }

  .components {
    padding: var(--apphub-spacing-3xl) 0;
  }

  .components__grid {
    display: grid;
    gap: var(--apphub-spacing-lg);
  }

  .components__grid article {
    background: var(--apphub-color-surface);
    border-radius: var(--apphub-radius-xl);
    padding: var(--apphub-spacing-lg);
    border: 1px solid var(--apphub-color-border);
    box-shadow: var(--apphub-shadow-soft);
  }

  .components__grid h3 {
    margin: 0 0 var(--apphub-spacing-xxs);
  }

  .modules {
    padding: var(--apphub-spacing-3xl) 0;
    background: var(--apphub-color-surface-muted);
  }

  @media (prefers-color-scheme: dark) {
    .modules {
      background: rgba(8, 49, 47, 0.6);
    }
  }

  .modules__inner {
    display: grid;
    gap: var(--apphub-spacing-xl);
    align-items: center;
  }

  .modules__grid {
    display: grid;
    gap: var(--apphub-spacing-md);
  }

  .modules__grid article {
    background: var(--apphub-color-surface);
    border-radius: var(--apphub-radius-lg);
    padding: var(--apphub-spacing-md);
    border: 1px solid var(--apphub-color-border);
  }

  .modules__footnote {
    margin: var(--apphub-spacing-md) 0 0;
    font-size: var(--apphub-typography-font-size-sm);
    color: var(--apphub-color-text-soft);
  }

  .modules__footnote code {
    background: rgba(15, 118, 110, 0.1);
    padding: 0 var(--apphub-spacing-xxs);
    border-radius: var(--apphub-radius-sm);
  }

  .use-cases {
    padding: var(--apphub-spacing-3xl) 0;
  }

  .use-cases__grid {
    display: grid;
    gap: var(--apphub-spacing-lg);
  }

  .use-cases__grid article {
    padding: var(--apphub-spacing-lg);
    border-radius: var(--apphub-radius-xl);
    border: 1px solid var(--apphub-color-border);
    background: var(--apphub-color-surface);
  }

  .data-plane {
    padding: var(--apphub-spacing-3xl) 0;
    background: linear-gradient(145deg, rgba(13, 148, 136, 0.12), rgba(15, 118, 110, 0.08));
  }

  @media (prefers-color-scheme: dark) {
    .data-plane {
      background: linear-gradient(145deg, rgba(20, 184, 166, 0.16), rgba(4, 47, 46, 0.9));
    }
  }

  .data-plane__inner {
    display: grid;
    gap: var(--apphub-spacing-xl);
    align-items: center;
  }

  .data-plane ul,
  .orchestration ul,
  .ui ul,
  .observatory ul {
    margin: 0;
    padding-left: var(--apphub-spacing-lg);
    display: grid;
    gap: var(--apphub-spacing-sm);
    color: var(--apphub-color-text-muted);
  }

  .data-plane figure,
  .orchestration figure,
  .ui figure,
  .observatory figure {
    margin: 0;
    display: grid;
    gap: var(--apphub-spacing-xxs);
    text-align: center;
  }

  .data-plane .diagram svg,
  .orchestration .diagram svg,
  .ui .diagram svg,
  .observatory .diagram svg {
    width: 100%;
    border-radius: var(--apphub-radius-xl);
    border: 1px solid var(--apphub-color-border);
    box-shadow: var(--apphub-shadow-soft);
    background: var(--apphub-color-surface);
  }

  .diagram {
    width: 100%;
    max-width: 640px;
    margin: 0 auto;
  }

  .data-plane figcaption,
  .orchestration figcaption,
  .ui figcaption,
  .observatory figcaption {
    font-size: var(--apphub-typography-font-size-xs);
    color: var(--apphub-color-text-soft);
  }

  .orchestration {
    padding: var(--apphub-spacing-3xl) 0;
  }

  .orchestration__inner {
    display: grid;
    gap: var(--apphub-spacing-xl);
    align-items: center;
  }

  .ui {
    padding: var(--apphub-spacing-3xl) 0;
    background: var(--apphub-color-surface-muted);
  }

  @media (prefers-color-scheme: dark) {
    .ui {
      background: rgba(2, 19, 18, 0.78);
    }
  }

  .ui__inner {
    display: grid;
    gap: var(--apphub-spacing-xl);
    align-items: center;
  }

  .deploy {
    padding: var(--apphub-spacing-3xl) 0;
  }

  .deploy__grid {
    display: grid;
    gap: var(--apphub-spacing-lg);
  }

  .deploy__grid article {
    background: var(--apphub-color-surface);
    border-radius: var(--apphub-radius-xl);
    padding: var(--apphub-spacing-lg);
    border: 1px solid var(--apphub-color-border);
  }

  .deploy__note {
    margin: var(--apphub-spacing-lg) 0 0;
    color: var(--apphub-color-text-soft);
  }

  .services {
    padding: var(--apphub-spacing-3xl) 0;
    background: linear-gradient(135deg, rgba(34, 211, 238, 0.12), rgba(13, 148, 136, 0.08));
  }

  @media (prefers-color-scheme: dark) {
    .services {
      background: linear-gradient(135deg, rgba(20, 184, 166, 0.18), rgba(2, 19, 18, 0.92));
    }
  }

  .services__inner {
    display: grid;
    gap: var(--apphub-spacing-xl);
  }

  .services__intro {
    max-width: 65ch;
    margin: 0 0 var(--apphub-spacing-md);
    color: var(--apphub-color-text-muted);
  }

  .services__grid {
    display: grid;
    gap: var(--apphub-spacing-lg);
  }

  .services__grid article {
    background: var(--apphub-color-surface);
    border-radius: var(--apphub-radius-xl);
    padding: var(--apphub-spacing-lg);
    border: 1px solid var(--apphub-color-border);
  }

  .observatory {
    padding: var(--apphub-spacing-3xl) 0;
  }

  .observatory__inner {
    display: grid;
    gap: var(--apphub-spacing-xl);
    align-items: center;
  }

  .observatory__intro {
    margin: 0 0 var(--apphub-spacing-md);
    color: var(--apphub-color-text-muted);
  }

  .cta {
    padding: var(--apphub-spacing-4xl) 0 var(--apphub-spacing-5xl);
    background: linear-gradient(160deg, rgba(13, 148, 136, 0.2), rgba(15, 118, 110, 0.16));
  }

  @media (prefers-color-scheme: dark) {
    .cta {
      background: linear-gradient(160deg, rgba(20, 184, 166, 0.24), rgba(2, 19, 18, 0.88));
    }
  }

  .cta__inner {
    display: grid;
    gap: var(--apphub-spacing-xl);
    align-items: center;
  }

  .cta__actions {
    display: flex;
    flex-wrap: wrap;
    gap: var(--apphub-spacing-sm);
  }

  @media (min-width: 768px) {
    .hero__inner {
      grid-template-columns: minmax(0, 1.1fr) minmax(0, 0.9fr);
    }

    .hero__stats {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }

    .components__grid {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }

    .modules__inner,
    .data-plane__inner,
    .orchestration__inner,
    .ui__inner,
    .observatory__inner {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }

    .modules__grid {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }

    .use-cases__grid {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }

    .deploy__grid,
    .services__grid {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
  }
</style>
