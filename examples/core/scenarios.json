{
  "scenarios": [
    {
      "id": "observatory-file-watcher-service",
      "type": "service-manifest",
      "title": "Observatory event-driven services",
      "summary": "Registers the watcher and dashboard services wired for the event-driven observatory import.",
      "description": "Imports the event-driven observatory service manifest so the watcher streams inbox uploads, the dashboard refreshes automatically, and downstream workflows receive the correct dataset references out of the box.",
      "difficulty": "beginner",
      "tags": [
        "observatory",
        "automation",
        "event-driven"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Config descriptor",
          "path": "examples/environmental-observatory-event-driven/config.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/config.json"
        },
        {
          "label": "Service manifest",
          "path": "examples/environmental-observatory-event-driven/service-manifests/service-manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/service-manifests/service-manifest.json"
        },
        {
          "label": "Watcher service",
          "path": "examples/environmental-observatory-event-driven/services/observatory-file-watcher/",
          "href": "https://github.com/benediktbwimmer/apphub/tree/main/examples/environmental-observatory-event-driven/services/observatory-file-watcher"
        },
        {
          "label": "Dashboard service",
          "path": "examples/environmental-observatory-event-driven/services/observatory-dashboard/",
          "href": "https://github.com/benediktbwimmer/apphub/tree/main/examples/environmental-observatory-event-driven/services/observatory-dashboard"
        }
      ],
      "form": {
        "repo": "https://github.com/benediktbwimmer/apphub.git",
        "ref": "main",
        "configPath": "examples/environmental-observatory-event-driven/config.json",
        "module": "github.com/apphub/examples/environmental-observatory-event-driven",
        "variables": {
          "OBSERVATORY_DATA_ROOT": "/tmp/apphub-scratch/observatory"
        }
      },
      "analyticsTag": "service__observatory_services"
    },
    {
      "id": "observatory-file-watcher-app",
      "type": "app",
      "title": "Observatory file watcher app",
      "summary": "Packages the watcher service into a container image.",
      "description": "Registers the watcher repository so AppHub can build and launch it as a container. The Dockerfile installs dependencies, builds the TypeScript project, and runs the compiled watcher entry point.",
      "difficulty": "intermediate",
      "tags": [
        "observatory",
        "workflow watcher",
        "event-driven"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Watcher repository",
          "path": "examples/environmental-observatory-event-driven/services/observatory-file-watcher/",
          "href": "https://github.com/benediktbwimmer/apphub/tree/main/examples/environmental-observatory-event-driven/services/observatory-file-watcher"
        },
        {
          "label": "Dockerfile",
          "path": "examples/environmental-observatory-event-driven/services/observatory-file-watcher/Dockerfile",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/services/observatory-file-watcher/Dockerfile"
        }
      ],
      "form": {
        "id": "observatory-file-watcher",
        "name": "Observatory File Watcher",
        "description": "Watches the observatory inbox for minute-level CSV drops and triggers ingest workflows automatically.",
        "repoUrl": "https://github.com/benediktbwimmer/apphub.git",
        "dockerfilePath": "examples/environmental-observatory-event-driven/services/observatory-file-watcher/Dockerfile",
        "tags": [
          {
            "key": "language",
            "value": "typescript"
          },
          {
            "key": "framework",
            "value": "fastify"
          }
        ],
        "sourceType": "remote",
        "metadataStrategy": "explicit"
      },
      "analyticsTag": "app__observatory_file_watcher",
      "requiresServices": [
        "observatory-file-watcher"
      ]
    },
    {
      "id": "observatory-dashboard-app",
      "type": "app",
      "title": "Observatory dashboard app",
      "summary": "Packages the dashboard service that renders live reports.",
      "description": "Registers the dashboard repository so AppHub can build and launch it as a container. The service reads the latest `status.json` artefacts and refreshes the embedded HTML automatically.",
      "difficulty": "beginner",
      "tags": [
        "observatory",
        "dashboard",
        "event-driven"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Dashboard repository",
          "path": "examples/environmental-observatory-event-driven/services/observatory-dashboard/",
          "href": "https://github.com/benediktbwimmer/apphub/tree/main/examples/environmental-observatory-event-driven/services/observatory-dashboard"
        },
        {
          "label": "Dockerfile",
          "path": "examples/environmental-observatory-event-driven/services/observatory-dashboard/Dockerfile",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/services/observatory-dashboard/Dockerfile"
        }
      ],
      "form": {
        "id": "observatory-dashboard",
        "name": "Observatory Dashboard",
        "description": "Displays the latest observatory status report with automatic refresh.",
        "repoUrl": "https://github.com/benediktbwimmer/apphub.git",
        "dockerfilePath": "examples/environmental-observatory-event-driven/services/observatory-dashboard/Dockerfile",
        "tags": [
          {
            "key": "language",
            "value": "typescript"
          },
          {
            "key": "framework",
            "value": "fastify"
          }
        ],
        "sourceType": "remote",
        "metadataStrategy": "explicit"
      },
      "analyticsTag": "app__observatory_dashboard",
      "requiresServices": [
        "observatory-dashboard"
      ]
    },
    {
      "id": "observatory-data-generator-job",
      "type": "job",
      "title": "Observatory data generator",
      "summary": "Produces synthetic inbox CSVs for minute ingest.",
      "description": "Uploads the `observatory-data-generator` bundle (0.1.0) so you can simulate instrument drops by writing synthetic CSVs into the observatory inbox.",
      "difficulty": "beginner",
      "tags": [
        "observatory",
        "simulation",
        "event-driven"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Bundle manifest",
          "path": "examples/environmental-observatory-event-driven/jobs/observatory-data-generator/manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/jobs/observatory-data-generator/manifest.json"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "observatory-data-generator@0.2.0",
        "notes": "Bundle sourced from examples/environmental-observatory-event-driven/jobs/observatory-data-generator. Files upload to Filestore; adjust the backend root or inbox prefix if you need a different host destination."
      },
      "exampleSlug": "observatory-data-generator",
      "analyticsTag": "job__observatory_data_generator"
    },
    {
      "id": "observatory-inbox-normalizer-job",
      "type": "job",
      "title": "Observatory inbox normalizer",
      "summary": "Stages minute-level CSV drops into standardized observatory assets.",
      "description": "Uploads the `observatory-inbox-normalizer` bundle (0.1.0). Pair it with the ingest workflow to emit `observatory.timeseries.raw` assets from inbox files.",
      "difficulty": "intermediate",
      "tags": [
        "observatory",
        "ingest",
        "event-driven"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Bundle manifest",
          "path": "examples/environmental-observatory-event-driven/jobs/observatory-inbox-normalizer/manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/jobs/observatory-inbox-normalizer/manifest.json"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "observatory-inbox-normalizer@0.1.0",
        "notes": "Bundle sourced from examples/environmental-observatory-event-driven/jobs/observatory-inbox-normalizer. Uses the shared observatory config; override the Filestore prefixes or data root if you need different host directories."
      },
      "exampleSlug": "observatory-inbox-normalizer",
      "analyticsTag": "job__observatory_inbox_normalizer"
    },
    {
      "id": "observatory-timestore-loader-job",
      "type": "job",
      "title": "Observatory Timestore loader",
      "summary": "Streams normalized readings into Timestore.",
      "description": "Uploads the `observatory-timestore-loader` bundle (0.2.0) to materialize `observatory.timeseries.timestore` assets after normalization completes.",
      "difficulty": "intermediate",
      "tags": [
        "observatory",
        "timestore"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Bundle manifest",
          "path": "examples/environmental-observatory-event-driven/jobs/observatory-timestore-loader/manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/jobs/observatory-timestore-loader/manifest.json"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "observatory-timestore-loader@0.2.0",
        "notes": "Bundle packaged from examples/environmental-observatory-event-driven/jobs/observatory-timestore-loader. Provide the Timestore base URL and dataset slug used by your ingest workflow."
      },
      "exampleSlug": "observatory-timestore-loader",
      "analyticsTag": "job__observatory_timestore_loader"
    },
    {
      "id": "observatory-visualization-runner-job",
      "type": "job",
      "title": "Observatory visualization runner",
      "summary": "Builds SVG plots and metrics from Timestore timeseries.",
      "description": "Uploads the `observatory-visualization-runner` bundle (0.2.0). Use it to generate observatory dashboards and feed the publication workflow.",
      "difficulty": "intermediate",
      "tags": [
        "observatory",
        "visualization"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Bundle manifest",
          "path": "examples/environmental-observatory-event-driven/jobs/observatory-visualization-runner/manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/jobs/observatory-visualization-runner/manifest.json"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "observatory-visualization-runner@0.2.0",
        "notes": "Bundle sourced from examples/environmental-observatory-event-driven/jobs/observatory-visualization-runner. Provide timestoreBaseUrl and plotsDir when previewing."
      },
      "exampleSlug": "observatory-visualization-runner",
      "analyticsTag": "job__observatory_visualization_runner"
    },
    {
      "id": "observatory-report-publisher-job",
      "type": "job",
      "title": "Observatory report publisher",
      "summary": "Publishes observatory status reports referencing generated plots.",
      "description": "Uploads the `observatory-report-publisher` bundle (0.1.0). Combine it with visualization outputs to render Markdown, HTML, and JSON reports.",
      "difficulty": "intermediate",
      "tags": [
        "observatory",
        "reporting",
        "event-driven"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Bundle manifest",
          "path": "examples/environmental-observatory-event-driven/jobs/observatory-report-publisher/manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/jobs/observatory-report-publisher/manifest.json"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "observatory-report-publisher@0.1.0",
        "notes": "Bundle packaged from examples/environmental-observatory-event-driven/jobs/observatory-report-publisher. Supply reportsDir and visualization asset metadata before running."
      },
      "exampleSlug": "observatory-report-publisher",
      "analyticsTag": "job__observatory_report_publisher"
    },
    {
      "id": "observatory-minute-data-generator-workflow",
      "type": "workflow",
      "title": "Observatory minute data generator",
      "summary": "Auto-schedules synthetic instrument data drops.",
      "description": "Imports the event-driven `observatory-minute-data-generator` workflow so AppHub provisions a ready-to-run minute cadence that continuously feeds the observatory inbox with synthetic telemetry.",
      "difficulty": "beginner",
      "tags": [
        "observatory",
        "simulation"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Workflow definition reference",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/workflows/observatory-minute-data-generator.json"
        }
      ],
      "form": {
        "slug": "observatory-minute-data-generator",
        "name": "Observatory Minute Data Generator",
        "version": 2,
        "description": "Uploads synthetic minute-level CSV drops to Filestore to simulate instrument readings arriving in the inbox.",
        "parametersSchema": {
          "type": "object",
          "properties": {
            "minute": {
              "type": "string",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}$"
            },
            "rowsPerInstrument": {
              "type": "number",
              "minimum": 1,
              "maximum": 360
            },
            "intervalMinutes": {
              "type": "number",
              "minimum": 1,
              "maximum": 120
            },
            "seed": {
              "type": "number"
            },
            "filestoreBaseUrl": {
              "type": "string",
              "minLength": 1
            },
            "filestoreBackendId": {
              "type": "number",
              "minimum": 1
            },
            "filestoreToken": {
              "type": "string"
            },
            "inboxPrefix": {
              "type": "string",
              "minLength": 1
            },
            "stagingPrefix": {
              "type": "string",
              "minLength": 1
            },
            "archivePrefix": {
              "type": "string",
              "minLength": 1
            },
            "filestorePrincipal": {
              "type": "string"
            }
          },
          "required": [
            "minute",
            "filestoreBaseUrl",
            "filestoreBackendId",
            "inboxPrefix",
            "stagingPrefix",
            "archivePrefix"
          ]
        },
        "defaultParameters": {
          "rowsPerInstrument": 6,
          "intervalMinutes": 10,
          "filestoreBaseUrl": "http://127.0.0.1:4300",
          "filestoreBackendId": 1,
          "inboxPrefix": "datasets/observatory/inbox",
          "stagingPrefix": "datasets/observatory/staging",
          "archivePrefix": "datasets/observatory/archive",
          "filestorePrincipal": "observatory-data-generator",
          "filestoreToken": null
        },
        "steps": [
          {
            "id": "generate-synthetic-drop",
            "name": "Generate synthetic instrument readings",
            "type": "job",
            "jobSlug": "observatory-data-generator",
            "parameters": {
              "minute": "{{ parameters.minute }}",
              "rowsPerInstrument": "{{ parameters.rowsPerInstrument }}",
              "intervalMinutes": "{{ parameters.intervalMinutes }}",
              "seed": "{{ parameters.seed }}",
              "filestoreBaseUrl": "{{ parameters.filestoreBaseUrl }}",
              "filestoreBackendId": "{{ parameters.filestoreBackendId }}",
              "filestoreToken": "{{ parameters.filestoreToken }}",
              "inboxPrefix": "{{ parameters.inboxPrefix }}",
              "stagingPrefix": "{{ parameters.stagingPrefix }}",
              "archivePrefix": "{{ parameters.archivePrefix }}",
              "principal": "{{ parameters.filestorePrincipal }}"
            },
            "storeResultAs": "syntheticDrop",
            "produces": [
              {
                "assetId": "observatory.inbox.synthetic",
                "partitioning": {
                  "type": "timeWindow",
                  "granularity": "minute",
                  "format": "YYYY-MM-DDTHH:mm",
                  "lookbackWindows": 1440
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "partitionKey": {
                      "type": "string"
                    },
                    "filestoreInboxPrefix": {
                      "type": "string"
                    },
                    "filestoreBackendId": {
                      "type": "number"
                    },
                    "rowsGenerated": {
                      "type": "number"
                    },
                    "instrumentCount": {
                      "type": "number"
                    },
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "relativePath": {
                            "type": "string"
                          },
                          "filestorePath": {
                            "type": "string"
                          },
                          "instrumentId": {
                            "type": "string"
                          },
                          "site": {
                            "type": "string"
                          },
                          "rows": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "relativePath",
                          "filestorePath",
                          "instrumentId",
                          "rows"
                        ]
                      }
                    }
                  },
                  "required": [
                    "generatedAt",
                    "partitionKey",
                    "filestoreInboxPrefix",
                    "filestoreBackendId",
                    "rowsGenerated",
                    "instrumentCount",
                    "files"
                  ]
                }
              }
            ]
          }
        ],
        "triggers": [
          {
            "type": "manual"
          }
        ],
        "metadata": {
          "provisioning": {
            "schedules": [
              {
                "name": "Observatory minute data generator",
                "description": "Emit synthetic instrument drops every minute so downstream ingest and visualization workflows stay in sync.",
                "cron": "*/1 * * * *",
                "timezone": "UTC",
                "catchUp": false,
                "isActive": true,
                "parameters": {
                  "rowsPerInstrument": "{{ defaultParameters.rowsPerInstrument }}",
                  "intervalMinutes": "{{ defaultParameters.intervalMinutes }}",
                  "filestoreBaseUrl": "{{ defaultParameters.filestoreBaseUrl }}",
                  "filestoreBackendId": "{{ defaultParameters.filestoreBackendId }}",
                  "filestoreToken": "{{ defaultParameters.filestoreToken }}",
                  "inboxPrefix": "{{ defaultParameters.inboxPrefix }}",
                  "stagingPrefix": "{{ defaultParameters.stagingPrefix }}",
                  "archivePrefix": "{{ defaultParameters.archivePrefix }}",
                  "filestorePrincipal": "{{ defaultParameters.filestorePrincipal }}",
                  "metastoreBaseUrl": "{{ defaultParameters.metastoreBaseUrl }}",
                  "metastoreNamespace": "{{ defaultParameters.metastoreNamespace }}",
                  "metastoreAuthToken": "{{ defaultParameters.metastoreAuthToken }}"
                }
              }
            ]
          }
        }
      },
      "includes": [
        "observatory-data-generator-job"
      ],
      "analyticsTag": "workflow__observatory_data_generator"
    },
    {
      "id": "observatory-minute-ingest-workflow",
      "type": "workflow",
      "title": "Observatory minute ingest",
      "summary": "Normalizes inbox drops whenever Filestore records uploads.",
      "description": "Imports the event-driven `observatory-minute-ingest` workflow definition so Filestore upload events automatically normalize CSVs and persist observatory telemetry without manual trigger setup.",
      "difficulty": "intermediate",
      "tags": [
        "observatory",
        "ingest"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Workflow definition reference",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/workflows/observatory-minute-ingest.json"
        }
      ],
      "form": {
        "slug": "observatory-minute-ingest",
        "name": "Observatory Minute Ingest",
        "version": 1,
        "description": "Normalizes inbox CSVs and persists minute-level readings into Timestore.",
        "parametersSchema": {
          "type": "object",
          "properties": {
            "stagingDir": {
              "type": "string",
              "minLength": 1
            },
            "archiveDir": {
              "type": "string",
              "minLength": 1
            },
            "minute": {
              "type": "string",
              "minLength": 1
            },
            "maxFiles": {
              "type": "number",
              "minimum": 1,
              "maximum": 2000
            },
            "filestoreBaseUrl": {
              "type": "string",
              "minLength": 1
            },
            "filestoreBackendId": {
              "type": "number",
              "minimum": 1
            },
            "filestoreToken": {
              "type": "string"
            },
            "inboxPrefix": {
              "type": "string",
              "minLength": 1
            },
            "stagingPrefix": {
              "type": "string",
              "minLength": 1
            },
            "archivePrefix": {
              "type": "string",
              "minLength": 1
            },
            "filestorePrincipal": {
              "type": "string"
            },
            "commandPath": {
              "type": "string"
            },
            "metastoreBaseUrl": {
              "type": "string"
            },
            "metastoreNamespace": {
              "type": "string"
            },
            "metastoreAuthToken": {
              "type": "string"
            },
            "timestoreBaseUrl": {
              "type": "string",
              "minLength": 1
            },
            "timestoreDatasetSlug": {
              "type": "string",
              "minLength": 1
            },
            "timestoreDatasetName": {
              "type": "string"
            },
            "timestoreTableName": {
              "type": "string"
            },
            "timestoreStorageTargetId": {
              "type": "string"
            },
            "timestoreAuthToken": {
              "type": "string"
            }
          },
          "required": [
            "stagingDir",
            "archiveDir",
            "minute",
            "filestoreBaseUrl",
            "filestoreBackendId",
            "inboxPrefix",
            "stagingPrefix",
            "archivePrefix",
            "timestoreBaseUrl",
            "timestoreDatasetSlug"
          ]
        },
        "defaultParameters": {
          "maxFiles": 1000,
          "stagingDir": "/tmp/apphub-scratch/observatory/staging",
          "archiveDir": "/tmp/apphub-scratch/observatory/archive",
          "filestoreBaseUrl": "http://127.0.0.1:4300",
          "filestoreBackendId": 1,
          "inboxPrefix": "datasets/observatory/inbox",
          "stagingPrefix": "datasets/observatory/staging",
          "archivePrefix": "datasets/observatory/archive",
          "filestorePrincipal": "observatory-inbox-normalizer",
          "timestoreBaseUrl": "http://127.0.0.1:4200",
          "timestoreDatasetSlug": "observatory-timeseries",
          "timestoreDatasetName": "Observatory Time Series",
          "timestoreTableName": "observations",
          "filestoreToken": null,
          "timestoreStorageTargetId": null,
          "timestoreAuthToken": null,
          "metastoreBaseUrl": null,
          "metastoreNamespace": "observatory.ingest",
          "metastoreAuthToken": null
        },
        "steps": [
          {
            "id": "normalize-inbox",
            "name": "Normalize inbox files",
            "type": "job",
            "jobSlug": "observatory-inbox-normalizer",
            "parameters": {
              "stagingDir": "{{ parameters.stagingDir }}",
              "archiveDir": "{{ parameters.archiveDir }}",
              "minute": "{{ parameters.minute }}",
              "maxFiles": "{{ parameters.maxFiles }}",
              "filestoreBaseUrl": "{{ parameters.filestoreBaseUrl }}",
              "filestoreBackendId": "{{ parameters.filestoreBackendId }}",
              "filestoreToken": "{{ parameters.filestoreToken }}",
              "inboxPrefix": "{{ parameters.inboxPrefix }}",
              "stagingPrefix": "{{ parameters.stagingPrefix }}",
              "archivePrefix": "{{ parameters.archivePrefix }}",
              "commandPath": "{{ parameters.commandPath }}",
              "principal": "{{ parameters.filestorePrincipal }}"
            },
            "storeResultAs": "normalizedOutput",
            "produces": [
              {
                "assetId": "observatory.timeseries.raw",
                "partitioning": {
                  "type": "timeWindow",
                  "granularity": "minute",
                  "format": "YYYY-MM-DDTHH:mm",
                  "lookbackWindows": 1440
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "partitionKey": {
                      "type": "string"
                    },
                    "minute": {
                      "type": "string"
                    },
                    "instrumentCount": {
                      "type": "number"
                    },
                    "recordCount": {
                      "type": "number"
                    },
                    "sourceFiles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "relativePath": {
                            "type": "string"
                          },
                          "site": {
                            "type": "string"
                          },
                          "instrumentId": {
                            "type": "string"
                          },
                          "rows": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "relativePath",
                          "rows"
                        ]
                      }
                    },
                    "stagingDir": {
                      "type": "string"
                    },
                    "normalizedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": [
                    "partitionKey",
                    "minute",
                    "recordCount",
                    "sourceFiles",
                    "normalizedAt"
                  ]
                }
              }
            ]
          },
          {
            "id": "load-timestore",
            "name": "Ingest into Timestore",
            "type": "job",
            "jobSlug": "observatory-timestore-loader",
            "dependsOn": [
              "normalize-inbox"
            ],
            "parameters": {
              "datasetSlug": "{{ parameters.timestoreDatasetSlug }}",
              "datasetName": "{{ parameters.timestoreDatasetName }}",
              "tableName": "{{ parameters.timestoreTableName }}",
              "timestoreBaseUrl": "{{ parameters.timestoreBaseUrl }}",
              "timestoreAuthToken": "{{ parameters.timestoreAuthToken }}",
              "storageTargetId": "{{ parameters.timestoreStorageTargetId }}",
              "partitionNamespace": "observatory",
              "minute": "{{ parameters.minute }}",
              "idempotencyKey": "{{ parameters.minute }}",
              "rawAsset": "{{ shared.normalizedOutput.normalized }}"
            },
            "storeResultAs": "timestoreIngestion",
            "consumes": [
              {
                "assetId": "observatory.timeseries.raw"
              }
            ],
            "produces": [
              {
                "assetId": "observatory.timeseries.timestore",
                "partitioning": {
                  "type": "timeWindow",
                  "granularity": "minute",
                  "format": "YYYY-MM-DDTHH:mm",
                  "lookbackWindows": 1440
                },
                "freshness": {
                  "ttlMs": 60000
                },
                "autoMaterialize": {
                  "onUpstreamUpdate": true,
                  "priority": 5
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "partitionKey": {
                      "type": "string"
                    },
                    "datasetSlug": {
                      "type": "string"
                    },
                    "ingestionMode": {
                      "type": "string"
                    },
                    "manifestId": {
                      "type": "string"
                    },
                    "datasetId": {
                      "type": "string"
                    },
                    "rowCount": {
                      "type": "number"
                    },
                    "storageTargetId": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "partitionKey",
                    "datasetSlug",
                    "rowCount"
                  ]
                }
              }
            ]
          }
        ],
        "triggers": [
          {
            "type": "manual"
          }
        ],
        "metadata": {
          "provisioning": {
            "eventTriggers": [
              {
                "name": "Observatory ingest on filestore upload",
                "description": "Kick off the minute ingest workflow whenever new observatory CSV uploads land in Filestore.",
                "eventType": "filestore.command.completed",
                "eventSource": "filestore.service",
                "predicates": [
                  {
                    "path": "$.payload.command",
                    "operator": "equals",
                    "value": "uploadFile"
                  },
                  {
                    "path": "$.payload.backendMountId",
                    "operator": "equals",
                    "value": "{{ defaultParameters.filestoreBackendId }}"
                  }
                ],
                "parameterTemplate": {
                  "minute": "{{ event.payload.node.metadata.minute }}",
                  "maxFiles": "{{ trigger.metadata.maxFiles }}",
                  "stagingDir": "{{ trigger.metadata.paths.stagingDir }}",
                  "archiveDir": "{{ trigger.metadata.paths.archiveDir }}",
                  "filestoreBaseUrl": "{{ trigger.metadata.filestore.baseUrl }}",
                  "filestoreBackendId": "{{ trigger.metadata.filestore.backendMountId }}",
                  "filestoreToken": "{{ trigger.metadata.filestore.token }}",
                  "inboxPrefix": "{{ trigger.metadata.filestore.inboxPrefix }}",
                  "stagingPrefix": "{{ trigger.metadata.filestore.stagingPrefix }}",
                  "archivePrefix": "{{ trigger.metadata.filestore.archivePrefix }}",
                  "filestorePrincipal": "{{ trigger.metadata.filestore.principal }}",
                  "commandPath": "{{ event.payload.path }}",
                  "timestoreBaseUrl": "{{ trigger.metadata.timestore.baseUrl }}",
                  "timestoreDatasetSlug": "{{ trigger.metadata.timestore.datasetSlug }}",
                  "timestoreDatasetName": "{{ trigger.metadata.timestore.datasetName }}",
                  "timestoreTableName": "{{ trigger.metadata.timestore.tableName }}",
                  "timestoreStorageTargetId": "{{ trigger.metadata.timestore.storageTargetId }}",
                  "timestoreAuthToken": "{{ trigger.metadata.timestore.authToken }}"
                },
                "metadata": {
                  "maxFiles": "{{ defaultParameters.maxFiles }}",
                  "paths": {
                    "stagingDir": "{{ defaultParameters.stagingDir }}",
                    "archiveDir": "{{ defaultParameters.archiveDir }}"
                  },
                  "filestore": {
                    "baseUrl": "{{ defaultParameters.filestoreBaseUrl }}",
                    "backendMountId": "{{ defaultParameters.filestoreBackendId }}",
                    "token": "{{ defaultParameters.filestoreToken }}",
                    "inboxPrefix": "{{ defaultParameters.inboxPrefix }}",
                    "stagingPrefix": "{{ defaultParameters.stagingPrefix }}",
                    "archivePrefix": "{{ defaultParameters.archivePrefix }}",
                    "principal": "{{ defaultParameters.filestorePrincipal }}"
                  },
                  "timestore": {
                    "baseUrl": "{{ defaultParameters.timestoreBaseUrl }}",
                    "datasetSlug": "{{ defaultParameters.timestoreDatasetSlug }}",
                    "datasetName": "{{ defaultParameters.timestoreDatasetName }}",
                    "tableName": "{{ defaultParameters.timestoreTableName }}",
                    "storageTargetId": "{{ defaultParameters.timestoreStorageTargetId }}",
                    "authToken": "{{ defaultParameters.timestoreAuthToken }}"
                  }
                },
                "throttleWindowMs": 60000,
                "throttleCount": 1,
                "maxConcurrency": 1,
                "idempotencyKeyExpression": "{{ event.payload.node.metadata.minute }}",
                "status": "active"
              }
            ]
          }
        }
      },
      "includes": [
        "observatory-inbox-normalizer-job",
        "observatory-timestore-loader-job"
      ],
      "analyticsTag": "workflow__observatory_minute_ingest"
    },
    {
      "id": "observatory-daily-publication-workflow",
      "type": "workflow",
      "title": "Observatory daily publication",
      "summary": "Generates visualizations when new Timestore partitions land.",
      "description": "Imports the event-driven `observatory-daily-publication` workflow definition so Timestore partition events automatically render plots and publish observatory status reports.",
      "difficulty": "intermediate",
      "tags": [
        "observatory",
        "reporting"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Workflow definition reference",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/workflows/observatory-daily-publication.json"
        }
      ],
      "form": {
        "slug": "observatory-daily-publication",
        "name": "Observatory Visualization & Reports",
        "version": 1,
        "description": "Generates plots from Timestore partitions and publishes minute-level status reports with optional Metastore upserts.",
        "parametersSchema": {
          "type": "object",
          "properties": {
            "timestoreBaseUrl": {
              "type": "string",
              "minLength": 1
            },
            "timestoreDatasetSlug": {
              "type": "string",
              "minLength": 1
            },
            "timestoreAuthToken": {
              "type": "string"
            },
            "plotsDir": {
              "type": "string",
              "minLength": 1
            },
            "reportsDir": {
              "type": "string",
              "minLength": 1
            },
            "partitionKey": {
              "type": "string",
              "minLength": 1
            },
            "lookbackMinutes": {
              "type": "number",
              "minimum": 1,
              "maximum": 10080
            },
            "siteFilter": {
              "type": "string"
            },
            "reportTemplate": {
              "type": "string"
            },
            "metastoreBaseUrl": {
              "type": "string"
            },
            "metastoreAuthToken": {
              "type": "string"
            },
            "metastoreNamespace": {
              "type": "string"
            }
          },
          "required": [
            "timestoreBaseUrl",
            "timestoreDatasetSlug",
            "plotsDir",
            "reportsDir",
            "partitionKey"
          ]
        },
        "defaultParameters": {
          "lookbackMinutes": 180,
          "timestoreBaseUrl": "http://127.0.0.1:4200",
          "timestoreDatasetSlug": "observatory-timeseries",
          "plotsDir": "/tmp/apphub-scratch/observatory/plots",
          "reportsDir": "/tmp/apphub-scratch/observatory/reports",
          "metastoreBaseUrl": "http://127.0.0.1:4100",
          "metastoreNamespace": "observatory.reports",
          "timestoreAuthToken": null,
          "metastoreAuthToken": null
        },
        "steps": [
          {
            "id": "generate-plots",
            "name": "Generate observatory plots",
            "type": "job",
            "jobSlug": "observatory-visualization-runner",
            "parameters": {
              "timestoreBaseUrl": "{{ parameters.timestoreBaseUrl }}",
              "timestoreDatasetSlug": "{{ parameters.timestoreDatasetSlug }}",
              "timestoreAuthToken": "{{ parameters.timestoreAuthToken }}",
              "plotsDir": "{{ parameters.plotsDir }}",
              "partitionKey": "{{ parameters.partitionKey }}",
              "lookbackMinutes": "{{ parameters.lookbackMinutes }}",
              "siteFilter": "{{ parameters.siteFilter }}"
            },
            "storeResultAs": "visualizations",
            "consumes": [
              {
                "assetId": "observatory.timeseries.timestore"
              }
            ],
            "produces": [
              {
                "assetId": "observatory.visualizations.minute",
                "freshness": {
                  "ttlMs": 86400000
                },
                "autoMaterialize": {
                  "onUpstreamUpdate": true,
                  "priority": 6
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "partitionKey": {
                      "type": "string"
                    },
                    "plotsDir": {
                      "type": "string"
                    },
                    "lookbackMinutes": {
                      "type": "number"
                    },
                    "artifacts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "relativePath": {
                            "type": "string"
                          },
                          "mediaType": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "sizeBytes": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "relativePath",
                          "mediaType"
                        ]
                      }
                    },
                    "metrics": {
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "required": [
                    "generatedAt",
                    "partitionKey",
                    "plotsDir",
                    "artifacts"
                  ]
                }
              }
            ]
          },
          {
            "id": "publish-report",
            "name": "Publish status report",
            "type": "job",
            "jobSlug": "observatory-report-publisher",
            "dependsOn": [
              "generate-plots"
            ],
            "parameters": {
              "reportsDir": "{{ parameters.reportsDir }}",
              "plotsDir": "{{ parameters.plotsDir }}",
              "partitionKey": "{{ parameters.partitionKey }}",
              "reportTemplate": "{{ parameters.reportTemplate }}",
              "visualizationAsset": "{{ shared.visualizations.visualization }}",
              "metastoreBaseUrl": "{{ parameters.metastoreBaseUrl }}",
              "metastoreAuthToken": "{{ parameters.metastoreAuthToken }}",
              "metastoreNamespace": "{{ parameters.metastoreNamespace }}"
            },
            "consumes": [
              {
                "assetId": "observatory.visualizations.minute"
              }
            ],
            "produces": [
              {
                "assetId": "observatory.reports.status",
                "autoMaterialize": {
                  "onUpstreamUpdate": true,
                  "priority": 7
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "reportsDir": {
                      "type": "string"
                    },
                    "reportFiles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "relativePath": {
                            "type": "string"
                          },
                          "mediaType": {
                            "type": "string"
                          },
                          "sizeBytes": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "relativePath",
                          "mediaType"
                        ]
                      }
                    },
                    "summary": {
                      "type": "object",
                      "properties": {
                        "instrumentCount": {
                          "type": "number"
                        },
                        "siteCount": {
                          "type": "number"
                        },
                        "alertCount": {
                          "type": "number"
                        }
                      }
                    },
                    "plotsReferenced": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "relativePath": {
                            "type": "string"
                          },
                          "altText": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "relativePath"
                        ]
                      }
                    }
                  },
                  "required": [
                    "generatedAt",
                    "reportsDir",
                    "reportFiles"
                  ]
                }
              }
            ]
          }
        ],
        "triggers": [
          {
            "type": "manual"
          }
        ],
        "metadata": {
          "provisioning": {
            "eventTriggers": [
              {
                "name": "Observatory publication on timestore partition",
                "description": "Generate plots and publish observatory reports when new Timestore partitions are created.",
                "eventType": "timestore.partition.created",
                "eventSource": "timestore.ingest",
                "predicates": [
                  {
                    "path": "$.payload.datasetSlug",
                    "operator": "equals",
                    "value": "{{ defaultParameters.timestoreDatasetSlug }}"
                  }
                ],
                "parameterTemplate": {
                  "partitionKey": "{{ event.payload.partitionKey.window | default: event.payload.partitionKey }}",
                  "timestoreBaseUrl": "{{ trigger.metadata.timestore.baseUrl }}",
                  "timestoreDatasetSlug": "{{ trigger.metadata.timestore.datasetSlug }}",
                  "timestoreAuthToken": "{{ trigger.metadata.timestore.authToken }}",
                  "plotsDir": "{{ trigger.metadata.paths.plotsDir }}",
                  "reportsDir": "{{ trigger.metadata.paths.reportsDir }}",
                  "metastoreBaseUrl": "{{ trigger.metadata.metastore.baseUrl }}",
                  "metastoreNamespace": "{{ trigger.metadata.metastore.namespace }}",
                  "metastoreAuthToken": "{{ trigger.metadata.metastore.authToken }}"
                },
                "metadata": {
                  "timestore": {
                    "baseUrl": "{{ defaultParameters.timestoreBaseUrl }}",
                    "datasetSlug": "{{ defaultParameters.timestoreDatasetSlug }}",
                    "authToken": "{{ defaultParameters.timestoreAuthToken }}"
                  },
                  "paths": {
                    "plotsDir": "{{ defaultParameters.plotsDir }}",
                    "reportsDir": "{{ defaultParameters.reportsDir }}"
                  },
                  "metastore": {
                    "baseUrl": "{{ defaultParameters.metastoreBaseUrl }}",
                    "namespace": "{{ defaultParameters.metastoreNamespace }}",
                    "authToken": "{{ defaultParameters.metastoreAuthToken }}"
                  }
                },
                "throttleWindowMs": 60000,
                "throttleCount": 5,
                "maxConcurrency": 2,
                "idempotencyKeyExpression": "{{ event.payload.partitionKey.window | default: event.payload.partitionKey }}",
                "status": "active"
              }
            ]
          }
        }
      },
      "includes": [
        "observatory-visualization-runner-job",
        "observatory-report-publisher-job",
        "observatory-minute-ingest-workflow"
      ],
      "analyticsTag": "workflow__observatory_daily_publication"
    },
    {
      "id": "observatory-scenario-pack",
      "type": "scenario",
      "title": "Environmental observatory (event-driven)",
      "summary": "Loads the end-to-end observatory example with schedules and triggers prewired.",
      "description": "Prefills the importer with the watcher + dashboard services, supporting jobs, and the event-driven observatory workflows so you can replay the one-click demo with schedules and event triggers applied automatically.",
      "tags": [
        "observatory",
        "end-to-end",
        "event-driven"
      ],
      "includes": [
        "observatory-file-watcher-service",
        "observatory-file-watcher-app",
        "observatory-dashboard-app",
        "observatory-data-generator-job",
        "observatory-inbox-normalizer-job",
        "observatory-timestore-loader-job",
        "observatory-visualization-runner-job",
        "observatory-report-publisher-job",
        "observatory-minute-data-generator-workflow",
        "observatory-minute-ingest-workflow",
        "observatory-daily-publication-workflow"
      ],
      "focus": "workflows",
      "analyticsTag": "bundle__observatory"
    }
  ]
}
