{
  "services": [
    {
      "slug": "observatory-event-gateway",
      "displayName": "Observatory Event Gateway",
      "kind": "workflow-watcher",
      "baseUrl": "http://127.0.0.1:4310",
      "healthEndpoint": "/healthz",
      "devCommand": "npm run dev",
      "workingDir": "examples/environmental-observatory-event-driven/services/observatory-file-watcher",
      "env": [
        { "key": "PORT", "value": "4310" },
        {
          "key": "OBSERVATORY_CONFIG_PATH",
          "value": "examples/environmental-observatory-event-driven/.generated/observatory-config.json"
        },
        {
          "key": "OBSERVATORY_DATA_ROOT",
          "value": {
            "$var": {
              "name": "OBSERVATORY_DATA_ROOT",
              "default": "examples/environmental-observatory-event-driven/data",
              "description": "Base directory on the host where observatory datasets and artifacts are stored."
            }
          }
        },
        {
          "key": "OBSERVATORY_FILESTORE_BASE_URL",
          "value": {
            "$var": {
              "name": "OBSERVATORY_FILESTORE_BASE_URL",
              "default": "http://127.0.0.1:4300",
              "description": "Filestore API base URL for uploads and event subscriptions."
            }
          }
        },
        {
          "key": "OBSERVATORY_FILESTORE_BACKEND_ID",
          "value": {
            "$var": {
              "name": "OBSERVATORY_FILESTORE_BACKEND_ID",
              "default": "1",
              "description": "Backend mount identifier used by the filestore client."
            }
          }
        },
        {
          "key": "OBSERVATORY_FILESTORE_TOKEN",
          "value": {
            "$var": {
              "name": "OBSERVATORY_FILESTORE_TOKEN",
              "default": "",
              "description": "Optional bearer token forwarded to the Filestore API."
            }
          }
        },
        {
          "key": "OBSERVATORY_FILESTORE_INBOX_PREFIX",
          "value": {
            "$var": {
              "name": "OBSERVATORY_FILESTORE_INBOX_PREFIX",
              "default": "datasets/observatory/inbox",
              "description": "Filestore key prefix that maps to the inbox directory."
            }
          }
        },
        {
          "key": "OBSERVATORY_FILESTORE_STAGING_PREFIX",
          "value": {
            "$var": {
              "name": "OBSERVATORY_FILESTORE_STAGING_PREFIX",
              "default": "datasets/observatory/staging",
              "description": "Filestore key prefix backing the staging directory."
            }
          }
        },
        {
          "key": "OBSERVATORY_FILESTORE_ARCHIVE_PREFIX",
          "value": {
            "$var": {
              "name": "OBSERVATORY_FILESTORE_ARCHIVE_PREFIX",
              "default": "datasets/observatory/archive",
              "description": "Filestore key prefix where archived files are stored."
            }
          }
        },
        {
          "key": "OBSERVATORY_TIMESTORE_BASE_URL",
          "value": {
            "$var": {
              "name": "OBSERVATORY_TIMESTORE_BASE_URL",
              "default": "http://127.0.0.1:4200",
              "description": "Timestore API base URL for dataset management."
            }
          }
        },
        {
          "key": "OBSERVATORY_TIMESTORE_DATASET_SLUG",
          "value": {
            "$var": {
              "name": "OBSERVATORY_TIMESTORE_DATASET_SLUG",
              "default": "observatory-timeseries",
              "description": "Dataset slug used for minute-level readings."
            }
          }
        },
        {
          "key": "OBSERVATORY_TIMESTORE_DATASET_NAME",
          "value": {
            "$var": {
              "name": "OBSERVATORY_TIMESTORE_DATASET_NAME",
              "default": "Observatory Time Series",
              "description": "Human-readable dataset name created on first ingest."
            }
          }
        },
        {
          "key": "OBSERVATORY_TIMESTORE_TABLE_NAME",
          "value": {
            "$var": {
              "name": "OBSERVATORY_TIMESTORE_TABLE_NAME",
              "default": "observations",
              "description": "Logical timestore table written by the loader."
            }
          }
        },
        {
          "key": "OBSERVATORY_TIMESTORE_STORAGE_TARGET_ID",
          "value": {
            "$var": {
              "name": "OBSERVATORY_TIMESTORE_STORAGE_TARGET_ID",
              "default": "",
              "description": "Optional storage target override for timestore ingestion."
            }
          }
        },
        {
          "key": "OBSERVATORY_TIMESTORE_TOKEN",
          "value": {
            "$var": {
              "name": "OBSERVATORY_TIMESTORE_TOKEN",
              "default": "",
              "description": "Optional bearer token forwarded to Timestore."
            }
          }
        },
        {
          "key": "OBSERVATORY_METASTORE_BASE_URL",
          "value": {
            "$var": {
              "name": "OBSERVATORY_METASTORE_BASE_URL",
              "default": "http://127.0.0.1:4100",
              "description": "Metastore base URL used for report metadata."
            }
          }
        },
        {
          "key": "OBSERVATORY_METASTORE_NAMESPACE",
          "value": {
            "$var": {
              "name": "OBSERVATORY_METASTORE_NAMESPACE",
              "default": "observatory.reports",
              "description": "Metastore namespace storing published report metadata."
            }
          }
        },
        {
          "key": "OBSERVATORY_METASTORE_TOKEN",
          "value": {
            "$var": {
              "name": "OBSERVATORY_METASTORE_TOKEN",
              "default": "",
              "description": "Optional bearer token for the metastore API."
            }
          }
        },
        {
          "key": "OBSERVATORY_CATALOG_BASE_URL",
          "value": {
            "$var": {
              "name": "OBSERVATORY_CATALOG_BASE_URL",
              "default": "http://127.0.0.1:4000",
              "description": "Catalog API base URL used when provisioning workflows."
            }
          }
        },
        {
          "key": "OBSERVATORY_CATALOG_TOKEN",
          "value": {
            "$var": {
              "name": "OBSERVATORY_CATALOG_TOKEN",
              "default": "dev-token",
              "description": "Operator API token with workflow and bundle scopes."
            }
          }
        },
        {
          "key": "OBSERVATORY_INGEST_WORKFLOW_SLUG",
          "value": {
            "$var": {
              "name": "OBSERVATORY_INGEST_WORKFLOW_SLUG",
              "default": "observatory-minute-ingest",
              "description": "Workflow slug triggered when new inbox partitions arrive."
            }
          }
        },
        {
          "key": "OBSERVATORY_PUBLICATION_WORKFLOW_SLUG",
          "value": {
            "$var": {
              "name": "OBSERVATORY_PUBLICATION_WORKFLOW_SLUG",
              "default": "observatory-daily-publication",
              "description": "Workflow slug triggered after timestore partitions succeed."
            }
          }
        },
        {
          "key": "OBSERVATORY_VISUALIZATION_ASSET_ID",
          "value": {
            "$var": {
              "name": "OBSERVATORY_VISUALIZATION_ASSET_ID",
              "default": "observatory.visualizations.minute",
              "description": "Visualization asset id updated by the publication workflow."
            }
          }
        }
      ]
    },
    {
      "slug": "observatory-dashboard",
      "displayName": "Observatory Dashboard",
      "kind": "dashboard",
      "baseUrl": "http://127.0.0.1:4311",
      "healthEndpoint": "/healthz",
      "devCommand": "npm run dev",
      "workingDir": "examples/environmental-observatory-event-driven/services/observatory-dashboard",
      "env": [
        { "key": "HOST", "value": "0.0.0.0" },
        { "key": "PORT", "value": "4311" },
        {
          "key": "OBSERVATORY_CONFIG_PATH",
          "value": "examples/environmental-observatory-event-driven/.generated/observatory-config.json"
        },
        { "key": "DASHBOARD_REFRESH_MS", "value": "10000" }
      ]
    }
  ]
}
