{
  "scenarios": [
    {
      "id": "observatory-file-watcher-service",
      "type": "service-manifest",
      "title": "Observatory event-driven services",
      "summary": "Registers the watcher and dashboard services wired for the event-driven observatory import.",
      "description": "Imports the event-driven observatory service manifest so the watcher streams inbox uploads, the dashboard refreshes automatically, and downstream workflows receive the correct dataset references out of the box.",
      "difficulty": "beginner",
      "tags": [
        "observatory",
        "automation",
        "event-driven"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        },
        {
          "label": "File watcher guide",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/file-drop-watcher.md"
        }
      ],
      "assets": [
        {
          "label": "Config descriptor",
          "path": "examples/environmental-observatory-event-driven/config.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/config.json"
        },
        {
          "label": "Service manifest",
          "path": "examples/environmental-observatory-event-driven/service-manifests/service-manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/service-manifests/service-manifest.json"
        },
        {
          "label": "Watcher service",
          "path": "examples/environmental-observatory-event-driven/services/observatory-file-watcher/",
          "href": "https://github.com/benediktbwimmer/apphub/tree/main/examples/environmental-observatory-event-driven/services/observatory-file-watcher"
        },
        {
          "label": "Dashboard service",
          "path": "examples/environmental-observatory-event-driven/services/observatory-dashboard/",
          "href": "https://github.com/benediktbwimmer/apphub/tree/main/examples/environmental-observatory-event-driven/services/observatory-dashboard"
        }
      ],
      "form": {
        "repo": "https://github.com/benediktbwimmer/apphub.git",
        "ref": "main",
        "configPath": "examples/environmental-observatory-event-driven/config.json",
        "module": "github.com/apphub/examples/environmental-observatory-event-driven",
        "variables": {
          "OBSERVATORY_DATA_ROOT": "examples/environmental-observatory-event-driven/data"
        }
      },
      "analyticsTag": "service__observatory_services"
    },
    {
      "id": "observatory-file-watcher-app",
      "type": "app",
      "title": "Observatory file watcher app",
      "summary": "Packages the watcher service into a container image.",
      "description": "Registers the watcher repository so AppHub can build and launch it as a container. The Dockerfile installs dependencies, builds the TypeScript project, and runs the compiled watcher entry point.",
      "difficulty": "intermediate",
      "tags": [
        "observatory",
        "workflow watcher",
        "event-driven"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Watcher repository",
          "path": "examples/environmental-observatory-event-driven/services/observatory-file-watcher/",
          "href": "https://github.com/benediktbwimmer/apphub/tree/main/examples/environmental-observatory-event-driven/services/observatory-file-watcher"
        },
        {
          "label": "Dockerfile",
          "path": "examples/environmental-observatory-event-driven/services/observatory-file-watcher/Dockerfile",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/services/observatory-file-watcher/Dockerfile"
        }
      ],
      "form": {
        "id": "observatory-file-watcher",
        "name": "Observatory File Watcher",
        "description": "Watches the observatory inbox for minute-level CSV drops and triggers ingest workflows automatically.",
        "repoUrl": "https://github.com/benediktbwimmer/apphub.git",
        "dockerfilePath": "examples/environmental-observatory-event-driven/services/observatory-file-watcher/Dockerfile",
        "tags": [
          {
            "key": "language",
            "value": "typescript"
          },
          {
            "key": "framework",
            "value": "fastify"
          }
        ],
        "sourceType": "remote",
        "metadataStrategy": "explicit"
      },
      "analyticsTag": "app__observatory_file_watcher",
      "requiresServices": [
        "observatory-file-watcher"
      ]
    },
    {
      "id": "observatory-dashboard-app",
      "type": "app",
      "title": "Observatory dashboard app",
      "summary": "Packages the dashboard service that renders live reports.",
      "description": "Registers the dashboard repository so AppHub can build and launch it as a container. The service reads the latest `status.json` artefacts and refreshes the embedded HTML automatically.",
      "difficulty": "beginner",
      "tags": [
        "observatory",
        "dashboard",
        "event-driven"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Dashboard repository",
          "path": "examples/environmental-observatory-event-driven/services/observatory-dashboard/",
          "href": "https://github.com/benediktbwimmer/apphub/tree/main/examples/environmental-observatory-event-driven/services/observatory-dashboard"
        },
        {
          "label": "Dockerfile",
          "path": "examples/environmental-observatory-event-driven/services/observatory-dashboard/Dockerfile",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/services/observatory-dashboard/Dockerfile"
        }
      ],
      "form": {
        "id": "observatory-dashboard",
        "name": "Observatory Dashboard",
        "description": "Displays the latest observatory status report with automatic refresh.",
        "repoUrl": "https://github.com/benediktbwimmer/apphub.git",
        "dockerfilePath": "examples/environmental-observatory-event-driven/services/observatory-dashboard/Dockerfile",
        "tags": [
          {
            "key": "language",
            "value": "typescript"
          },
          {
            "key": "framework",
            "value": "fastify"
          }
        ],
        "sourceType": "remote",
        "metadataStrategy": "explicit"
      },
      "analyticsTag": "app__observatory_dashboard",
      "requiresServices": [
        "observatory-dashboard"
      ]
    },
    {
      "id": "file-relocator-job",
      "type": "job",
      "title": "File drop relocator job",
      "summary": "Moves a newly dropped file into the archive directory.",
      "description": "Uploads the `file-relocator` bundle (0.1.0). The watcher service triggers this job to move files out of the inbox and into `examples/file-drop/data/archive`, returning metadata for the dashboard.",
      "difficulty": "beginner",
      "tags": [
        "file drop",
        "automation"
      ],
      "docs": [
        {
          "label": "File drop watcher scenario",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/file-drop-watcher.md"
        }
      ],
      "assets": [
        {
          "label": "Bundle manifest",
          "path": "examples/file-drop/jobs/file-relocator/manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/file-drop/jobs/file-relocator/manifest.json"
        },
        {
          "label": "Watcher service",
          "path": "examples/environmental-observatory-event-driven/services/observatory-file-watcher/",
          "href": "https://github.com/benediktbwimmer/apphub/tree/main/examples/environmental-observatory-event-driven/services/observatory-file-watcher"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "file-relocator@0.1.0",
        "notes": "Bundle packaged from examples/file-drop/jobs/file-relocator. Works with the file drop watcher service."
      },
      "exampleSlug": "file-relocator",
      "analyticsTag": "job__file_relocator",
      "requiresServices": [
        "observatory-file-watcher"
      ]
    },
    {
      "id": "file-drop-relocation-workflow",
      "type": "workflow",
      "title": "File drop relocation",
      "summary": "Relocates dropped files and updates the watcher dashboard.",
      "description": "Imports the `file-drop-relocation` workflow definition. Step one runs the relocator job; step two calls back into the watcher service via a workflow service step so the dashboard can record completions.",
      "difficulty": "beginner",
      "tags": [
        "file drop",
        "service"
      ],
      "docs": [
        {
          "label": "File drop watcher scenario",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/file-drop-watcher.md"
        }
      ],
      "assets": [
        {
          "label": "Watcher service",
          "path": "examples/environmental-observatory-event-driven/services/observatory-file-watcher/",
          "href": "https://github.com/benediktbwimmer/apphub/tree/main/examples/environmental-observatory-event-driven/services/observatory-file-watcher"
        },
        {
          "label": "Relocator bundle",
          "path": "examples/file-drop/jobs/file-relocator/",
          "href": "https://github.com/benediktbwimmer/apphub/tree/main/examples/file-drop/jobs/file-relocator"
        }
      ],
      "form": {
        "slug": "file-drop-relocation",
        "name": "File drop relocation",
        "version": 1,
        "description": "Moves dropped files into the archive directory and notifies the watcher service.",
        "parametersSchema": {
          "type": "object",
          "properties": {
            "dropId": {
              "type": "string",
              "minLength": 1
            },
            "sourcePath": {
              "type": "string",
              "minLength": 1
            },
            "relativePath": {
              "type": "string",
              "minLength": 1
            },
            "destinationDir": {
              "type": "string",
              "minLength": 1
            },
            "destinationFilename": {
              "type": "string",
              "minLength": 1
            }
          },
          "required": [
            "dropId",
            "sourcePath",
            "relativePath",
            "destinationDir"
          ]
        },
        "steps": [
          {
            "id": "relocate",
            "name": "Relocate file",
            "type": "job",
            "jobSlug": "file-relocator",
            "parameters": {
              "dropId": "{{ parameters.dropId }}",
              "sourcePath": "{{ parameters.sourcePath }}",
              "relativePath": "{{ parameters.relativePath }}",
              "destinationDir": "{{ parameters.destinationDir }}",
              "destinationFilename": "{{ parameters.destinationFilename }}"
            },
            "storeResultAs": "relocatedFile",
            "retryPolicy": {
              "maxAttempts": 2,
              "strategy": "fixed",
              "initialDelayMs": 2000
            }
          },
          {
            "id": "notify-watcher",
            "name": "Notify watcher",
            "type": "service",
            "serviceSlug": "file-drop-watcher",
            "dependsOn": [
              "relocate"
            ],
            "timeoutMs": 5000,
            "request": {
              "method": "POST",
              "path": "/api/drops/{{ parameters.dropId }}/complete",
              "body": {
                "dropId": "{{ parameters.dropId }}",
                "runId": "{{ run.id }}",
                "status": "{{ steps.relocate.status }}",
                "file": "{{ shared.relocatedFile }}"
              }
            },
            "allowDegraded": true
          }
        ],
        "triggers": [
          {
            "type": "manual"
          }
        ]
      },
      "includes": [
        "file-relocator-job"
      ],
      "analyticsTag": "workflow__file_drop_relocation",
      "requiresServices": [
        "observatory-file-watcher"
      ],
      "requiresJobs": [
        "file-relocator"
      ]
    },
    {
      "id": "file-drop-scenario-pack",
      "type": "scenario",
      "title": "File drop watcher demo",
      "summary": "Loads the relocator job and workflow used by the watcher service.",
      "description": "Prefills the importer with the relocator bundle and workflow so you can pair the watcher service with ready-made definitions.",
      "tags": [
        "file drop",
        "automation"
      ],
      "includes": [
        "file-relocator-job",
        "file-drop-relocation-workflow"
      ],
      "focus": "workflows",
      "analyticsTag": "bundle__file_drop_watcher",
      "requiresServices": [
        "observatory-file-watcher"
      ]
    },
    {
      "id": "retail-sales-csv-loader-job",
      "type": "job",
      "title": "Retail sales CSV loader",
      "summary": "Stages the CSV ingest job that seeds `retail.sales.raw` partitions.",
      "description": "Uploads the `retail-sales-csv-loader` bundle (0.1.0) so you can preview the ingest job against the sample dataset in `examples/retail-sales/data`. Perfect for exercising the ingest loop end-to-end.",
      "difficulty": "beginner",
      "tags": [
        "ingest",
        "retail sales"
      ],
      "docs": [
        {
          "label": "Retail sales workflow walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/retail-sales-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Sample CSV dataset",
          "path": "examples/retail-sales/data/",
          "href": "https://github.com/benediktbwimmer/apphub/tree/main/examples/retail-sales/data"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "retail-sales-csv-loader@0.1.0",
        "notes": "Prebuilt bundle from examples/retail-sales/jobs/retail-sales-csv-loader. Use examples/retail-sales/data as dataRoot when running."
      },
      "exampleSlug": "retail-sales-csv-loader",
      "analyticsTag": "job__retail_sales_csv_loader"
    },
    {
      "id": "retail-sales-parquet-job",
      "type": "job",
      "title": "Retail sales parquet builder",
      "summary": "Builds curated Parquet assets from the example retail dataset.",
      "description": "Uploads the `retail-sales-parquet-builder` bundle (0.1.0) so you can validate downstream materialization. Once the CSV loader fills partitions, run this job to emit `retail.sales.parquet` using the same data root.",
      "difficulty": "beginner",
      "tags": [
        "fs capability",
        "retail sales"
      ],
      "docs": [
        {
          "label": "Retail sales workflow walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/retail-sales-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Bundle manifest",
          "path": "examples/retail-sales/jobs/retail-sales-parquet-builder/manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/retail-sales/jobs/retail-sales-parquet-builder/manifest.json"
        },
        {
          "label": "Sample CSV dataset",
          "path": "examples/retail-sales/data/",
          "href": "https://github.com/benediktbwimmer/apphub/tree/main/examples/retail-sales/data"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "retail-sales-parquet-builder@0.1.0",
        "notes": "Bundle sourced from examples/retail-sales/jobs/retail-sales-parquet-builder. Leave notes to document which partitions you are building."
      },
      "exampleSlug": "retail-sales-parquet-builder",
      "analyticsTag": "job__retail_sales_parquet_builder"
    },
    {
      "id": "retail-sales-visualizer-job",
      "type": "job",
      "title": "Retail sales visualizer",
      "summary": "Publishes dashboard assets after Parquet assets refresh.",
      "description": "Uploads the `retail-sales-visualizer` bundle (0.1.0) to complete the retail demo. The job reads the curated Parquet outputs and writes SVG/HTML artifacts so you can mirror the full walkthrough locally.",
      "difficulty": "beginner",
      "tags": [
        "dashboard",
        "retail sales"
      ],
      "docs": [
        {
          "label": "Retail sales workflow walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/retail-sales-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Visualization job manifest",
          "path": "examples/retail-sales/jobs/retail-sales-visualizer/manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/retail-sales/jobs/retail-sales-visualizer/manifest.json"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "retail-sales-visualizer@0.1.0",
        "notes": "Bundle packaged from examples/retail-sales/jobs/retail-sales-visualizer. Point parameters at the Parquet output directory when running."
      },
      "exampleSlug": "retail-sales-visualizer",
      "analyticsTag": "job__retail_sales_visualizer"
    },
    {
      "id": "fleet-telemetry-metrics-job",
      "type": "job",
      "title": "Fleet telemetry metrics",
      "summary": "Aggregates raw instrument CSVs into rollup artifacts.",
      "description": "Uploads the `fleet-telemetry-metrics` bundle (0.1.0). With the dataset under `examples/fleet-telemetry/data/raw`, you can preview the rollup workflow and emit metrics per instrument/day.",
      "difficulty": "intermediate",
      "tags": [
        "dynamic partitions",
        "fleet telemetry"
      ],
      "docs": [
        {
          "label": "Fleet telemetry walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/fleet-telemetry-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Telemetry dataset",
          "path": "examples/fleet-telemetry/data/raw/",
          "href": "https://github.com/benediktbwimmer/apphub/tree/main/examples/fleet-telemetry/data/raw"
        },
        {
          "label": "Bundle manifest",
          "path": "examples/fleet-telemetry/jobs/fleet-telemetry-metrics/manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/fleet-telemetry/jobs/fleet-telemetry-metrics/manifest.json"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "fleet-telemetry-metrics@0.1.0",
        "notes": "Bundle built from examples/fleet-telemetry/jobs/fleet-telemetry-metrics. Use examples/fleet-telemetry/data/raw as dataRoot when previewing."
      },
      "exampleSlug": "fleet-telemetry-metrics",
      "analyticsTag": "job__fleet_telemetry_metrics"
    },
    {
      "id": "greenhouse-alerts-runner-job",
      "type": "job",
      "title": "Greenhouse alerts runner",
      "summary": "Consumes telemetry rollups to raise greenhouse alerts.",
      "description": "Uploads the `greenhouse-alerts-runner` bundle (0.1.0). Point the parameters at the rollup directory (`examples/fleet-telemetry/data/rollups`) to replay alert evaluation against the example metrics.",
      "difficulty": "intermediate",
      "tags": [
        "alerts",
        "fleet telemetry"
      ],
      "docs": [
        {
          "label": "Fleet telemetry walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/fleet-telemetry-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Telemetry rollups",
          "path": "examples/fleet-telemetry/data/rollups/",
          "href": "https://github.com/benediktbwimmer/apphub/tree/main/examples/fleet-telemetry/data/rollups"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "greenhouse-alerts-runner@0.1.0",
        "notes": "Bundle packaged from examples/fleet-telemetry/jobs/greenhouse-alerts-runner. Provide telemetryDir pointing at examples/fleet-telemetry/data/rollups."
      },
      "exampleSlug": "greenhouse-alerts-runner",
      "analyticsTag": "job__greenhouse_alerts_runner"
    },
    {
      "id": "scan-directory-job",
      "type": "job",
      "title": "Directory scanner job",
      "summary": "Indexes a directory tree and captures per-file metadata.",
      "description": "Uploads the `scan-directory` bundle (0.1.0). Use it to crawl `examples/directory-insights/data/output` or any workspace directory before generating visualizations.",
      "difficulty": "intermediate",
      "tags": [
        "directory insights",
        "fs capability"
      ],
      "docs": [
        {
          "label": "Directory insights walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/directory-insights-workflow.md"
        }
      ],
      "assets": [
        {
          "label": "Bundle manifest",
          "path": "examples/directory-insights/jobs/scan-directory/manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/directory-insights/jobs/scan-directory/manifest.json"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "scan-directory@0.1.0",
        "notes": "Bundle sourced from examples/directory-insights/jobs/scan-directory. Provide scanDir pointing at a workspace directory when previewing."
      },
      "exampleSlug": "scan-directory",
      "analyticsTag": "job__scan_directory"
    },
    {
      "id": "generate-visualizations-job",
      "type": "job",
      "title": "Directory visualization builder",
      "summary": "Renders HTML, Markdown, and JSON reports from scan metadata.",
      "description": "Uploads the `generate-visualizations` bundle (0.1.2) to turn directory scan outputs into shareable reports for the insights demo.",
      "difficulty": "intermediate",
      "tags": [
        "directory insights",
        "reporting"
      ],
      "docs": [
        {
          "label": "Directory insights walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/directory-insights-workflow.md"
        }
      ],
      "assets": [
        {
          "label": "Visualization job manifest",
          "path": "examples/directory-insights/jobs/generate-visualizations/manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/directory-insights/jobs/generate-visualizations/manifest.json"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "generate-visualizations@0.1.2",
        "notes": "Bundle built from examples/directory-insights/jobs/generate-visualizations. Point scanData at the scan-directory output when running."
      },
      "exampleSlug": "generate-visualizations",
      "analyticsTag": "job__generate_visualizations"
    },
    {
      "id": "archive-report-job",
      "type": "job",
      "title": "Directory report archiver",
      "summary": "Compresses generated reports and artifacts into a tarball.",
      "description": "Uploads the `archive-report` bundle (0.1.1) so you can archive directory insight artifacts and publish `directory.insights.archive` assets.",
      "difficulty": "beginner",
      "tags": [
        "directory insights",
        "automation"
      ],
      "docs": [
        {
          "label": "Directory insights archive guide",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/directory-insights-archive-workflow.md"
        }
      ],
      "assets": [
        {
          "label": "Archive job manifest",
          "path": "examples/directory-insights/jobs/archive-report/manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/directory-insights/jobs/archive-report/manifest.json"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "archive-report@0.1.1",
        "notes": "Bundle packaged from examples/directory-insights/jobs/archive-report. Use alongside the directory insights workflows to archive generated reports."
      },
      "exampleSlug": "archive-report",
      "analyticsTag": "job__archive_report"
    },
    {
      "id": "observatory-data-generator-job",
      "type": "job",
      "title": "Observatory data generator",
      "summary": "Produces synthetic inbox CSVs for minute ingest.",
      "description": "Uploads the `observatory-data-generator` bundle (0.1.0) so you can simulate instrument drops by writing synthetic CSVs into the observatory inbox.",
      "difficulty": "beginner",
      "tags": [
        "observatory",
        "simulation",
        "event-driven"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Bundle manifest",
          "path": "examples/environmental-observatory-event-driven/jobs/observatory-data-generator/manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/jobs/observatory-data-generator/manifest.json"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "observatory-data-generator@0.2.0",
        "notes": "Bundle sourced from examples/environmental-observatory-event-driven/jobs/observatory-data-generator. Files upload to Filestore; adjust the backend root or inbox prefix if you need a different host destination."
      },
      "exampleSlug": "observatory-data-generator",
      "analyticsTag": "job__observatory_data_generator"
    },
    {
      "id": "observatory-inbox-normalizer-job",
      "type": "job",
      "title": "Observatory inbox normalizer",
      "summary": "Stages minute-level CSV drops into standardized observatory assets.",
      "description": "Uploads the `observatory-inbox-normalizer` bundle (0.1.0). Pair it with the ingest workflow to emit `observatory.timeseries.raw` assets from inbox files.",
      "difficulty": "intermediate",
      "tags": [
        "observatory",
        "ingest",
        "event-driven"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Bundle manifest",
          "path": "examples/environmental-observatory-event-driven/jobs/observatory-inbox-normalizer/manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/jobs/observatory-inbox-normalizer/manifest.json"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "observatory-inbox-normalizer@0.1.0",
        "notes": "Bundle sourced from examples/environmental-observatory-event-driven/jobs/observatory-inbox-normalizer. Uses the shared observatory config; override the Filestore prefixes or data root if you need different host directories."
      },
      "exampleSlug": "observatory-inbox-normalizer",
      "analyticsTag": "job__observatory_inbox_normalizer"
    },
    {
      "id": "observatory-timestore-loader-job",
      "type": "job",
      "title": "Observatory Timestore loader",
      "summary": "Streams normalized readings into Timestore.",
      "description": "Uploads the `observatory-timestore-loader` bundle (0.1.0) to materialize `observatory.timeseries.timestore` assets after normalization completes.",
      "difficulty": "intermediate",
      "tags": [
        "observatory",
        "timestore"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Bundle manifest",
          "path": "examples/environmental-observatory-event-driven/jobs/observatory-timestore-loader/manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/jobs/observatory-timestore-loader/manifest.json"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "observatory-timestore-loader@0.1.0",
        "notes": "Bundle packaged from examples/environmental-observatory-event-driven/jobs/observatory-timestore-loader. Provide the Timestore base URL and dataset slug used by your ingest workflow."
      },
      "exampleSlug": "observatory-timestore-loader",
      "analyticsTag": "job__observatory_timestore_loader"
    },
    {
      "id": "observatory-visualization-runner-job",
      "type": "job",
      "title": "Observatory visualization runner",
      "summary": "Builds SVG plots and metrics from Timestore timeseries.",
      "description": "Uploads the `observatory-visualization-runner` bundle (0.1.0). Use it to generate observatory dashboards and feed the publication workflow.",
      "difficulty": "intermediate",
      "tags": [
        "observatory",
        "visualization"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Bundle manifest",
          "path": "examples/environmental-observatory-event-driven/jobs/observatory-visualization-runner/manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/jobs/observatory-visualization-runner/manifest.json"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "observatory-visualization-runner@0.1.0",
        "notes": "Bundle sourced from examples/environmental-observatory-event-driven/jobs/observatory-visualization-runner. Provide timestoreBaseUrl and plotsDir when previewing."
      },
      "exampleSlug": "observatory-visualization-runner",
      "analyticsTag": "job__observatory_visualization_runner"
    },
    {
      "id": "observatory-report-publisher-job",
      "type": "job",
      "title": "Observatory report publisher",
      "summary": "Publishes observatory status reports referencing generated plots.",
      "description": "Uploads the `observatory-report-publisher` bundle (0.1.0). Combine it with visualization outputs to render Markdown, HTML, and JSON reports.",
      "difficulty": "intermediate",
      "tags": [
        "observatory",
        "reporting",
        "event-driven"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Bundle manifest",
          "path": "examples/environmental-observatory-event-driven/jobs/observatory-report-publisher/manifest.json",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/jobs/observatory-report-publisher/manifest.json"
        }
      ],
      "form": {
        "source": "upload",
        "reference": "observatory-report-publisher@0.1.0",
        "notes": "Bundle packaged from examples/environmental-observatory-event-driven/jobs/observatory-report-publisher. Supply reportsDir and visualization asset metadata before running."
      },
      "exampleSlug": "observatory-report-publisher",
      "analyticsTag": "job__observatory_report_publisher"
    },
    {
      "id": "retail-sales-daily-ingest-workflow",
      "type": "workflow",
      "title": "Retail sales daily ingest",
      "summary": "Ingests CSV exports and builds curated Parquet assets.",
      "description": "Imports the `retail-sales-daily-ingest` workflow definition. It runs the CSV loader and Parquet builder jobs to materialize `retail.sales.raw` and `retail.sales.parquet` partitions for a given day.",
      "difficulty": "intermediate",
      "tags": [
        "retail sales",
        "ingest"
      ],
      "docs": [
        {
          "label": "Retail sales workflow walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/retail-sales-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Workflow definition reference",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/retail-sales/workflows/retail-sales-daily-ingest.json"
        }
      ],
      "form": {
        "slug": "retail-sales-daily-ingest",
        "name": "Retail Sales Daily Ingest",
        "version": 1,
        "description": "Loads partitioned CSV exports and builds Parquet snapshots.",
        "parametersSchema": {
          "type": "object",
          "properties": {
            "dataRoot": {
              "type": "string",
              "minLength": 1
            },
            "warehouseDir": {
              "type": "string",
              "minLength": 1
            },
            "datasetName": {
              "type": "string"
            },
            "partitionKey": {
              "type": "string",
              "minLength": 1
            }
          },
          "required": [
            "dataRoot",
            "warehouseDir",
            "partitionKey"
          ]
        },
        "defaultParameters": {
          "datasetName": "retail_sales"
        },
        "steps": [
          {
            "id": "load-partition",
            "name": "Load partition CSV",
            "type": "job",
            "jobSlug": "retail-sales-csv-loader",
            "parameters": {
              "dataRoot": "{{ parameters.dataRoot }}",
              "datasetName": "{{ parameters.datasetName }}",
              "partitionKey": "{{ parameters.partitionKey }}"
            },
            "storeResultAs": "rawPartition",
            "produces": [
              {
                "assetId": "retail.sales.raw",
                "partitioning": {
                  "type": "timeWindow",
                  "granularity": "day",
                  "format": "YYYY-MM-DD",
                  "lookbackWindows": 30
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "partitionKey": {
                      "type": "string"
                    },
                    "sourceFile": {
                      "type": "string"
                    },
                    "totals": {
                      "type": "object",
                      "properties": {
                        "units": {
                          "type": "number"
                        },
                        "revenue": {
                          "type": "number"
                        },
                        "averageOrderValue": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "units",
                        "revenue"
                      ]
                    },
                    "byCategory": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "category": {
                            "type": "string"
                          },
                          "units": {
                            "type": "number"
                          },
                          "revenue": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "category",
                          "revenue"
                        ]
                      }
                    },
                    "byRegion": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "region": {
                            "type": "string"
                          },
                          "revenue": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "region",
                          "revenue"
                        ]
                      }
                    },
                    "channels": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "channel": {
                            "type": "string"
                          },
                          "revenue": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "channel",
                          "revenue"
                        ]
                      }
                    }
                  },
                  "required": [
                    "partitionKey",
                    "sourceFile",
                    "totals"
                  ]
                }
              }
            ]
          },
          {
            "id": "build-parquet",
            "name": "Build Parquet artifacts",
            "type": "job",
            "jobSlug": "retail-sales-parquet-builder",
            "dependsOn": [
              "load-partition"
            ],
            "parameters": {
              "warehouseDir": "{{ parameters.warehouseDir }}",
              "partitionKey": "{{ shared.rawPartition.partitionKey }}",
              "rawPartition": "{{ shared.rawPartition }}"
            },
            "storeResultAs": "warehousePartition",
            "consumes": [
              {
                "assetId": "retail.sales.raw"
              }
            ],
            "produces": [
              {
                "assetId": "retail.sales.parquet",
                "partitioning": {
                  "type": "timeWindow",
                  "granularity": "day",
                  "format": "YYYY-MM-DD",
                  "lookbackWindows": 30
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "partitionKey": {
                      "type": "string"
                    },
                    "parquetFile": {
                      "type": "string"
                    },
                    "summaryFile": {
                      "type": "string"
                    },
                    "totals": {
                      "type": "object",
                      "properties": {
                        "units": {
                          "type": "number"
                        },
                        "revenue": {
                          "type": "number"
                        },
                        "averageOrderValue": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "units",
                        "revenue"
                      ]
                    },
                    "byCategory": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "category": {
                            "type": "string"
                          },
                          "units": {
                            "type": "number"
                          },
                          "revenue": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "category",
                          "revenue"
                        ]
                      }
                    },
                    "byRegion": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "region": {
                            "type": "string"
                          },
                          "revenue": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "region",
                          "revenue"
                        ]
                      }
                    },
                    "channels": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "channel": {
                            "type": "string"
                          },
                          "revenue": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "channel",
                          "revenue"
                        ]
                      }
                    }
                  },
                  "required": [
                    "partitionKey",
                    "parquetFile",
                    "summaryFile",
                    "totals"
                  ]
                }
              }
            ]
          }
        ],
        "triggers": [
          {
            "type": "manual"
          }
        ]
      },
      "includes": [
        "retail-sales-csv-loader-job",
        "retail-sales-parquet-job"
      ],
      "analyticsTag": "workflow__retail_sales_ingest"
    },
    {
      "id": "retail-sales-insights-workflow",
      "type": "workflow",
      "title": "Retail sales insights publishing",
      "summary": "Transforms Parquet partitions into dashboards and artifacts.",
      "description": "Imports the `retail-sales-insights` workflow definition. It reads curated Parquet data and renders static HTML, Markdown, and JSON reports for the retail demo.",
      "difficulty": "intermediate",
      "tags": [
        "retail sales",
        "reporting"
      ],
      "docs": [
        {
          "label": "Retail sales workflow walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/retail-sales-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Workflow definition reference",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/retail-sales/workflows/retail-sales-insights.json"
        }
      ],
      "form": {
        "slug": "retail-sales-insights",
        "name": "Retail Sales Insights Publishing",
        "version": 1,
        "description": "Aggregates Parquet partitions, renders plots, and publishes a static dashboard.",
        "parametersSchema": {
          "type": "object",
          "properties": {
            "warehouseDir": {
              "type": "string",
              "minLength": 1
            },
            "outputDir": {
              "type": "string",
              "minLength": 1
            },
            "reportTitle": {
              "type": "string"
            },
            "lookback": {
              "type": "number",
              "minimum": 1,
              "maximum": 90
            }
          },
          "required": [
            "warehouseDir",
            "outputDir"
          ]
        },
        "defaultParameters": {
          "reportTitle": "Retail Sales Daily Report",
          "lookback": 14
        },
        "steps": [
          {
            "id": "render-report",
            "name": "Render dashboard",
            "type": "job",
            "jobSlug": "retail-sales-visualizer",
            "parameters": {
              "warehouseDir": "{{ parameters.warehouseDir }}",
              "outputDir": "{{ parameters.outputDir }}",
              "reportTitle": "{{ parameters.reportTitle }}",
              "lookback": "{{ parameters.lookback }}"
            },
            "storeResultAs": "report",
            "consumes": [
              {
                "assetId": "retail.sales.parquet"
              }
            ],
            "produces": [
              {
                "assetId": "retail.sales.report",
                "autoMaterialize": {
                  "onUpstreamUpdate": true,
                  "priority": 4
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "reportTitle": {
                      "type": "string"
                    },
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "partitions": {
                      "type": "number"
                    },
                    "totalRevenue": {
                      "type": "number"
                    },
                    "totalUnits": {
                      "type": "number"
                    },
                    "averageOrderValue": {
                      "type": "number"
                    },
                    "revenueSeries": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "partitionKey": {
                            "type": "string"
                          },
                          "revenue": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "partitionKey",
                          "revenue"
                        ]
                      }
                    },
                    "topCategories": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "category": {
                            "type": "string"
                          },
                          "revenue": {
                            "type": "number"
                          },
                          "share": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "category",
                          "revenue"
                        ]
                      }
                    },
                    "topRegions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "region": {
                            "type": "string"
                          },
                          "revenue": {
                            "type": "number"
                          },
                          "share": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "region",
                          "revenue"
                        ]
                      }
                    },
                    "artifacts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "relativePath": {
                            "type": "string"
                          },
                          "mediaType": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "sizeBytes": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "relativePath",
                          "mediaType"
                        ]
                      }
                    }
                  },
                  "required": [
                    "reportTitle",
                    "generatedAt",
                    "partitions",
                    "totalRevenue",
                    "artifacts"
                  ]
                }
              }
            ]
          }
        ],
        "triggers": [
          {
            "type": "manual"
          }
        ]
      },
      "includes": [
        "retail-sales-visualizer-job"
      ],
      "analyticsTag": "workflow__retail_sales_insights"
    },
    {
      "id": "observatory-minute-data-generator-workflow",
      "type": "workflow",
      "title": "Observatory minute data generator",
      "summary": "Auto-schedules synthetic instrument data drops.",
      "description": "Imports the event-driven `observatory-minute-data-generator` workflow so AppHub provisions a ready-to-run minute cadence that continuously feeds the observatory inbox with synthetic telemetry.",
      "difficulty": "beginner",
      "tags": [
        "observatory",
        "simulation"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Workflow definition reference",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/workflows/observatory-minute-data-generator.json"
        }
      ],
      "form": {
        "slug": "observatory-minute-data-generator",
        "name": "Observatory Minute Data Generator",
        "version": 2,
        "description": "Uploads synthetic minute-level CSV drops to Filestore to simulate instrument readings arriving in the inbox.",
        "parametersSchema": {
          "type": "object",
          "properties": {
            "minute": {
              "type": "string",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}$"
            },
            "rowsPerInstrument": {
              "type": "number",
              "minimum": 1,
              "maximum": 360
            },
            "intervalMinutes": {
              "type": "number",
              "minimum": 1,
              "maximum": 120
            },
            "seed": {
              "type": "number"
            },
            "filestoreBaseUrl": {
              "type": "string",
              "minLength": 1
            },
            "filestoreBackendId": {
              "type": "number",
              "minimum": 1
            },
            "filestoreToken": {
              "type": "string"
            },
            "inboxPrefix": {
              "type": "string",
              "minLength": 1
            },
            "stagingPrefix": {
              "type": "string",
              "minLength": 1
            },
            "archivePrefix": {
              "type": "string",
              "minLength": 1
            },
            "filestorePrincipal": {
              "type": "string"
            }
          },
          "required": [
            "minute",
            "filestoreBaseUrl",
            "filestoreBackendId",
            "inboxPrefix",
            "stagingPrefix",
            "archivePrefix"
          ]
        },
        "defaultParameters": {
          "rowsPerInstrument": 6,
          "intervalMinutes": 10,
          "filestoreBaseUrl": "http://127.0.0.1:4300",
          "filestoreBackendId": 1,
          "inboxPrefix": "datasets/observatory/inbox",
          "stagingPrefix": "datasets/observatory/staging",
          "archivePrefix": "datasets/observatory/archive",
          "filestorePrincipal": "observatory-data-generator",
          "filestoreToken": null
        },
        "steps": [
          {
            "id": "generate-synthetic-drop",
            "name": "Generate synthetic instrument readings",
            "type": "job",
            "jobSlug": "observatory-data-generator",
            "parameters": {
              "minute": "{{ parameters.minute }}",
              "rowsPerInstrument": "{{ parameters.rowsPerInstrument }}",
              "intervalMinutes": "{{ parameters.intervalMinutes }}",
              "seed": "{{ parameters.seed }}",
              "filestoreBaseUrl": "{{ parameters.filestoreBaseUrl }}",
              "filestoreBackendId": "{{ parameters.filestoreBackendId }}",
              "filestoreToken": "{{ parameters.filestoreToken }}",
              "inboxPrefix": "{{ parameters.inboxPrefix }}",
              "stagingPrefix": "{{ parameters.stagingPrefix }}",
              "archivePrefix": "{{ parameters.archivePrefix }}",
              "principal": "{{ parameters.filestorePrincipal }}"
            },
            "storeResultAs": "syntheticDrop",
            "produces": [
              {
                "assetId": "observatory.inbox.synthetic",
                "partitioning": {
                  "type": "timeWindow",
                  "granularity": "minute",
                  "format": "YYYY-MM-DDTHH:mm",
                  "lookbackWindows": 1440
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "partitionKey": {
                      "type": "string"
                    },
                    "filestoreInboxPrefix": {
                      "type": "string"
                    },
                    "filestoreBackendId": {
                      "type": "number"
                    },
                    "rowsGenerated": {
                      "type": "number"
                    },
                    "instrumentCount": {
                      "type": "number"
                    },
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "relativePath": {
                            "type": "string"
                          },
                          "filestorePath": {
                            "type": "string"
                          },
                          "instrumentId": {
                            "type": "string"
                          },
                          "site": {
                            "type": "string"
                          },
                          "rows": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "relativePath",
                          "filestorePath",
                          "instrumentId",
                          "rows"
                        ]
                      }
                    }
                  },
                  "required": [
                    "generatedAt",
                    "partitionKey",
                    "filestoreInboxPrefix",
                    "filestoreBackendId",
                    "rowsGenerated",
                    "instrumentCount",
                    "files"
                  ]
                }
              }
            ]
          }
        ],
        "triggers": [
          {
            "type": "manual"
          }
        ],
        "metadata": {
          "provisioning": {
            "schedules": [
              {
                "name": "Observatory minute data generator",
                "description": "Emit synthetic instrument drops every minute so downstream ingest and visualization workflows stay in sync.",
                "cron": "*/1 * * * *",
                "timezone": "UTC",
                "catchUp": false,
                "isActive": true,
                "parameters": {
                  "rowsPerInstrument": "{{ defaultParameters.rowsPerInstrument }}",
                  "intervalMinutes": "{{ defaultParameters.intervalMinutes }}",
                  "filestoreBaseUrl": "{{ defaultParameters.filestoreBaseUrl }}",
                  "filestoreBackendId": "{{ defaultParameters.filestoreBackendId }}",
                  "filestoreToken": "{{ defaultParameters.filestoreToken }}",
                  "inboxPrefix": "{{ defaultParameters.inboxPrefix }}",
                  "stagingPrefix": "{{ defaultParameters.stagingPrefix }}",
                  "archivePrefix": "{{ defaultParameters.archivePrefix }}",
                  "filestorePrincipal": "{{ defaultParameters.filestorePrincipal }}"
                }
              }
            ]
          }
        }
      },
      "includes": [
        "observatory-data-generator-job"
      ],
      "analyticsTag": "workflow__observatory_data_generator"
    },
    {
      "id": "observatory-minute-ingest-workflow",
      "type": "workflow",
      "title": "Observatory minute ingest",
      "summary": "Normalizes inbox drops whenever Filestore records uploads.",
      "description": "Imports the event-driven `observatory-minute-ingest` workflow definition so Filestore upload events automatically normalize CSVs and persist observatory telemetry without manual trigger setup.",
      "difficulty": "intermediate",
      "tags": [
        "observatory",
        "ingest"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Workflow definition reference",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/workflows/observatory-minute-ingest.json"
        }
      ],
      "form": {
        "slug": "observatory-minute-ingest",
        "name": "Observatory Minute Ingest",
        "version": 1,
        "description": "Normalizes inbox CSVs and persists minute-level readings into Timestore.",
        "parametersSchema": {
          "type": "object",
          "properties": {
            "stagingDir": {
              "type": "string",
              "minLength": 1
            },
            "archiveDir": {
              "type": "string",
              "minLength": 1
            },
            "minute": {
              "type": "string",
              "minLength": 1
            },
            "maxFiles": {
              "type": "number",
              "minimum": 1,
              "maximum": 200
            },
            "filestoreBaseUrl": {
              "type": "string",
              "minLength": 1
            },
            "filestoreBackendId": {
              "type": "number",
              "minimum": 1
            },
            "filestoreToken": {
              "type": "string"
            },
            "inboxPrefix": {
              "type": "string",
              "minLength": 1
            },
            "stagingPrefix": {
              "type": "string",
              "minLength": 1
            },
            "archivePrefix": {
              "type": "string",
              "minLength": 1
            },
            "filestorePrincipal": {
              "type": "string"
            },
            "commandPath": {
              "type": "string"
            },
            "timestoreBaseUrl": {
              "type": "string",
              "minLength": 1
            },
            "timestoreDatasetSlug": {
              "type": "string",
              "minLength": 1
            },
            "timestoreDatasetName": {
              "type": "string"
            },
            "timestoreTableName": {
              "type": "string"
            },
            "timestoreStorageTargetId": {
              "type": "string"
            },
            "timestoreAuthToken": {
              "type": "string"
            }
          },
          "required": [
            "stagingDir",
            "archiveDir",
            "minute",
            "filestoreBaseUrl",
            "filestoreBackendId",
            "inboxPrefix",
            "stagingPrefix",
            "archivePrefix",
            "timestoreBaseUrl",
            "timestoreDatasetSlug"
          ]
        },
        "defaultParameters": {
          "maxFiles": 64,
          "stagingDir": "examples/environmental-observatory-event-driven/data/staging",
          "archiveDir": "examples/environmental-observatory-event-driven/data/archive",
          "filestoreBaseUrl": "http://127.0.0.1:4300",
          "filestoreBackendId": 1,
          "inboxPrefix": "datasets/observatory/inbox",
          "stagingPrefix": "datasets/observatory/staging",
          "archivePrefix": "datasets/observatory/archive",
          "filestorePrincipal": "observatory-inbox-normalizer",
          "timestoreBaseUrl": "http://127.0.0.1:4200",
          "timestoreDatasetSlug": "observatory-timeseries",
          "timestoreDatasetName": "Observatory Time Series",
          "timestoreTableName": "observations",
          "filestoreToken": null,
          "timestoreStorageTargetId": null,
          "timestoreAuthToken": null
        },
        "steps": [
          {
            "id": "normalize-inbox",
            "name": "Normalize inbox files",
            "type": "job",
            "jobSlug": "observatory-inbox-normalizer",
            "parameters": {
              "stagingDir": "{{ parameters.stagingDir }}",
              "archiveDir": "{{ parameters.archiveDir }}",
              "minute": "{{ parameters.minute }}",
              "maxFiles": "{{ parameters.maxFiles }}",
              "filestoreBaseUrl": "{{ parameters.filestoreBaseUrl }}",
              "filestoreBackendId": "{{ parameters.filestoreBackendId }}",
              "filestoreToken": "{{ parameters.filestoreToken }}",
              "inboxPrefix": "{{ parameters.inboxPrefix }}",
              "stagingPrefix": "{{ parameters.stagingPrefix }}",
              "archivePrefix": "{{ parameters.archivePrefix }}",
              "commandPath": "{{ parameters.commandPath }}",
              "principal": "{{ parameters.filestorePrincipal }}"
            },
            "storeResultAs": "normalizedOutput",
            "produces": [
              {
                "assetId": "observatory.timeseries.raw",
                "partitioning": {
                  "type": "timeWindow",
                  "granularity": "minute",
                  "format": "YYYY-MM-DDTHH:mm",
                  "lookbackWindows": 1440
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "partitionKey": {
                      "type": "string"
                    },
                    "minute": {
                      "type": "string"
                    },
                    "instrumentCount": {
                      "type": "number"
                    },
                    "recordCount": {
                      "type": "number"
                    },
                    "sourceFiles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "relativePath": {
                            "type": "string"
                          },
                          "site": {
                            "type": "string"
                          },
                          "instrumentId": {
                            "type": "string"
                          },
                          "rows": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "relativePath",
                          "rows"
                        ]
                      }
                    },
                    "stagingDir": {
                      "type": "string"
                    },
                    "normalizedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": [
                    "partitionKey",
                    "minute",
                    "recordCount",
                    "sourceFiles",
                    "normalizedAt"
                  ]
                }
              }
            ]
          },
          {
            "id": "load-timestore",
            "name": "Ingest into Timestore",
            "type": "job",
            "jobSlug": "observatory-timestore-loader",
            "dependsOn": [
              "normalize-inbox"
            ],
            "parameters": {
              "datasetSlug": "{{ parameters.timestoreDatasetSlug }}",
              "datasetName": "{{ parameters.timestoreDatasetName }}",
              "tableName": "{{ parameters.timestoreTableName }}",
              "timestoreBaseUrl": "{{ parameters.timestoreBaseUrl }}",
              "timestoreAuthToken": "{{ parameters.timestoreAuthToken }}",
              "storageTargetId": "{{ parameters.timestoreStorageTargetId }}",
              "partitionNamespace": "observatory",
              "minute": "{{ parameters.minute }}",
              "idempotencyKey": "{{ parameters.minute }}",
              "rawAsset": "{{ shared.normalizedOutput.normalized }}"
            },
            "storeResultAs": "timestoreIngestion",
            "consumes": [
              {
                "assetId": "observatory.timeseries.raw"
              }
            ],
            "produces": [
              {
                "assetId": "observatory.timeseries.timestore",
                "partitioning": {
                  "type": "timeWindow",
                  "granularity": "minute",
                  "format": "YYYY-MM-DDTHH:mm",
                  "lookbackWindows": 1440
                },
                "freshness": {
                  "ttlMs": 60000
                },
                "autoMaterialize": {
                  "onUpstreamUpdate": true,
                  "priority": 5
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "partitionKey": {
                      "type": "string"
                    },
                    "datasetSlug": {
                      "type": "string"
                    },
                    "ingestionMode": {
                      "type": "string"
                    },
                    "manifestId": {
                      "type": "string"
                    },
                    "datasetId": {
                      "type": "string"
                    },
                    "rowCount": {
                      "type": "number"
                    },
                    "storageTargetId": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "partitionKey",
                    "datasetSlug",
                    "rowCount"
                  ]
                }
              }
            ]
          }
        ],
        "triggers": [
          {
            "type": "manual"
          }
        ],
        "metadata": {
          "provisioning": {
            "eventTriggers": [
              {
                "name": "Observatory ingest on filestore upload",
                "description": "Kick off the minute ingest workflow whenever new observatory CSV uploads land in Filestore.",
                "eventType": "filestore.command.completed",
                "eventSource": "filestore.service",
                "predicates": [
                  {
                    "path": "$.payload.command",
                    "operator": "equals",
                    "value": "uploadFile"
                  },
                  {
                    "path": "$.payload.backendMountId",
                    "operator": "equals",
                    "value": "{{ defaultParameters.filestoreBackendId }}"
                  }
                ],
                "parameterTemplate": {
                  "minute": "{{ event.payload.node.metadata.minute }}",
                  "maxFiles": "{{ trigger.metadata.maxFiles }}",
                  "stagingDir": "{{ trigger.metadata.paths.stagingDir }}",
                  "archiveDir": "{{ trigger.metadata.paths.archiveDir }}",
                  "filestoreBaseUrl": "{{ trigger.metadata.filestore.baseUrl }}",
                  "filestoreBackendId": "{{ trigger.metadata.filestore.backendMountId }}",
                  "filestoreToken": "{{ trigger.metadata.filestore.token }}",
                  "inboxPrefix": "{{ trigger.metadata.filestore.inboxPrefix }}",
                  "stagingPrefix": "{{ trigger.metadata.filestore.stagingPrefix }}",
                  "archivePrefix": "{{ trigger.metadata.filestore.archivePrefix }}",
                  "filestorePrincipal": "{{ trigger.metadata.filestore.principal }}",
                  "commandPath": "{{ event.payload.path }}",
                  "timestoreBaseUrl": "{{ trigger.metadata.timestore.baseUrl }}",
                  "timestoreDatasetSlug": "{{ trigger.metadata.timestore.datasetSlug }}",
                  "timestoreDatasetName": "{{ trigger.metadata.timestore.datasetName }}",
                  "timestoreTableName": "{{ trigger.metadata.timestore.tableName }}",
                  "timestoreStorageTargetId": "{{ trigger.metadata.timestore.storageTargetId }}",
                  "timestoreAuthToken": "{{ trigger.metadata.timestore.authToken }}"
                },
                "metadata": {
                  "maxFiles": "{{ defaultParameters.maxFiles }}",
                  "paths": {
                    "stagingDir": "{{ defaultParameters.stagingDir }}",
                    "archiveDir": "{{ defaultParameters.archiveDir }}"
                  },
                  "filestore": {
                    "baseUrl": "{{ defaultParameters.filestoreBaseUrl }}",
                    "backendMountId": "{{ defaultParameters.filestoreBackendId }}",
                    "token": "{{ defaultParameters.filestoreToken }}",
                    "inboxPrefix": "{{ defaultParameters.inboxPrefix }}",
                    "stagingPrefix": "{{ defaultParameters.stagingPrefix }}",
                    "archivePrefix": "{{ defaultParameters.archivePrefix }}",
                    "principal": "{{ defaultParameters.filestorePrincipal }}"
                  },
                  "timestore": {
                    "baseUrl": "{{ defaultParameters.timestoreBaseUrl }}",
                    "datasetSlug": "{{ defaultParameters.timestoreDatasetSlug }}",
                    "datasetName": "{{ defaultParameters.timestoreDatasetName }}",
                    "tableName": "{{ defaultParameters.timestoreTableName }}",
                    "storageTargetId": "{{ defaultParameters.timestoreStorageTargetId }}",
                    "authToken": "{{ defaultParameters.timestoreAuthToken }}"
                  }
                },
                "throttleWindowMs": 60000,
                "throttleCount": 1,
                "maxConcurrency": 1,
                "idempotencyKeyExpression": "{{ event.payload.node.metadata.minute }}",
                "status": "active"
              }
            ]
          }
        }
      },
      "includes": [
        "observatory-inbox-normalizer-job",
        "observatory-timestore-loader-job"
      ],
      "analyticsTag": "workflow__observatory_minute_ingest"
    },
    {
      "id": "observatory-daily-publication-workflow",
      "type": "workflow",
      "title": "Observatory daily publication",
      "summary": "Generates visualizations when new Timestore partitions land.",
      "description": "Imports the event-driven `observatory-daily-publication` workflow definition so Timestore partition events automatically render plots and publish observatory status reports.",
      "difficulty": "intermediate",
      "tags": [
        "observatory",
        "reporting"
      ],
      "docs": [
        {
          "label": "Environmental observatory walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/environmental-observatory-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Workflow definition reference",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/environmental-observatory-event-driven/workflows/observatory-daily-publication.json"
        }
      ],
      "form": {
        "slug": "observatory-daily-publication",
        "name": "Observatory Visualization & Reports",
        "version": 1,
        "description": "Generates plots from Timestore partitions and publishes minute-level status reports with optional Metastore upserts.",
        "parametersSchema": {
          "type": "object",
          "properties": {
            "timestoreBaseUrl": {
              "type": "string",
              "minLength": 1
            },
            "timestoreDatasetSlug": {
              "type": "string",
              "minLength": 1
            },
            "timestoreAuthToken": {
              "type": "string"
            },
            "plotsDir": {
              "type": "string",
              "minLength": 1
            },
            "reportsDir": {
              "type": "string",
              "minLength": 1
            },
            "partitionKey": {
              "type": "string",
              "minLength": 1
            },
            "lookbackMinutes": {
              "type": "number",
              "minimum": 1,
              "maximum": 10080
            },
            "siteFilter": {
              "type": "string"
            },
            "reportTemplate": {
              "type": "string"
            },
            "metastoreBaseUrl": {
              "type": "string"
            },
            "metastoreAuthToken": {
              "type": "string"
            },
            "metastoreNamespace": {
              "type": "string"
            }
          },
          "required": [
            "timestoreBaseUrl",
            "timestoreDatasetSlug",
            "plotsDir",
            "reportsDir",
            "partitionKey"
          ]
        },
        "defaultParameters": {
          "lookbackMinutes": 180,
          "timestoreBaseUrl": "http://127.0.0.1:4200",
          "timestoreDatasetSlug": "observatory-timeseries",
          "plotsDir": "examples/environmental-observatory-event-driven/data/plots",
          "reportsDir": "examples/environmental-observatory-event-driven/data/reports",
          "metastoreBaseUrl": "http://127.0.0.1:4100",
          "metastoreNamespace": "observatory.reports",
          "timestoreAuthToken": null,
          "metastoreAuthToken": null
        },
        "steps": [
          {
            "id": "generate-plots",
            "name": "Generate observatory plots",
            "type": "job",
            "jobSlug": "observatory-visualization-runner",
            "parameters": {
              "timestoreBaseUrl": "{{ parameters.timestoreBaseUrl }}",
              "timestoreDatasetSlug": "{{ parameters.timestoreDatasetSlug }}",
              "timestoreAuthToken": "{{ parameters.timestoreAuthToken }}",
              "plotsDir": "{{ parameters.plotsDir }}",
              "partitionKey": "{{ parameters.partitionKey }}",
              "lookbackMinutes": "{{ parameters.lookbackMinutes }}",
              "siteFilter": "{{ parameters.siteFilter }}"
            },
            "storeResultAs": "visualizations",
            "consumes": [
              {
                "assetId": "observatory.timeseries.timestore"
              }
            ],
            "produces": [
              {
                "assetId": "observatory.visualizations.minute",
                "freshness": {
                  "ttlMs": 86400000
                },
                "autoMaterialize": {
                  "onUpstreamUpdate": true,
                  "priority": 6
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "partitionKey": {
                      "type": "string"
                    },
                    "plotsDir": {
                      "type": "string"
                    },
                    "lookbackMinutes": {
                      "type": "number"
                    },
                    "artifacts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "relativePath": {
                            "type": "string"
                          },
                          "mediaType": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "sizeBytes": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "relativePath",
                          "mediaType"
                        ]
                      }
                    },
                    "metrics": {
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "required": [
                    "generatedAt",
                    "partitionKey",
                    "plotsDir",
                    "artifacts"
                  ]
                }
              }
            ]
          },
          {
            "id": "publish-report",
            "name": "Publish status report",
            "type": "job",
            "jobSlug": "observatory-report-publisher",
            "dependsOn": [
              "generate-plots"
            ],
            "parameters": {
              "reportsDir": "{{ parameters.reportsDir }}",
              "plotsDir": "{{ parameters.plotsDir }}",
              "partitionKey": "{{ parameters.partitionKey }}",
              "reportTemplate": "{{ parameters.reportTemplate }}",
              "visualizationAsset": "{{ shared.visualizations.visualization }}",
              "metastoreBaseUrl": "{{ parameters.metastoreBaseUrl }}",
              "metastoreAuthToken": "{{ parameters.metastoreAuthToken }}",
              "metastoreNamespace": "{{ parameters.metastoreNamespace }}"
            },
            "consumes": [
              {
                "assetId": "observatory.visualizations.minute"
              }
            ],
            "produces": [
              {
                "assetId": "observatory.reports.status",
                "autoMaterialize": {
                  "onUpstreamUpdate": true,
                  "priority": 7
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "reportsDir": {
                      "type": "string"
                    },
                    "reportFiles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "relativePath": {
                            "type": "string"
                          },
                          "mediaType": {
                            "type": "string"
                          },
                          "sizeBytes": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "relativePath",
                          "mediaType"
                        ]
                      }
                    },
                    "summary": {
                      "type": "object",
                      "properties": {
                        "instrumentCount": {
                          "type": "number"
                        },
                        "siteCount": {
                          "type": "number"
                        },
                        "alertCount": {
                          "type": "number"
                        }
                      }
                    },
                    "plotsReferenced": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "relativePath": {
                            "type": "string"
                          },
                          "altText": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "relativePath"
                        ]
                      }
                    }
                  },
                  "required": [
                    "generatedAt",
                    "reportsDir",
                    "reportFiles"
                  ]
                }
              }
            ]
          }
        ],
        "triggers": [
          {
            "type": "manual"
          }
        ],
        "metadata": {
          "provisioning": {
            "eventTriggers": [
              {
                "name": "Observatory publication on timestore partition",
                "description": "Generate plots and publish observatory reports when new Timestore partitions are created.",
                "eventType": "timestore.partition.created",
                "eventSource": "timestore.ingest",
                "predicates": [
                  {
                    "path": "$.payload.datasetSlug",
                    "operator": "equals",
                    "value": "{{ defaultParameters.timestoreDatasetSlug }}"
                  }
                ],
                "parameterTemplate": {
                  "partitionKey": "{{ event.payload.partitionKey.window | default: event.payload.partitionKey }}",
                  "timestoreBaseUrl": "{{ trigger.metadata.timestore.baseUrl }}",
                  "timestoreDatasetSlug": "{{ trigger.metadata.timestore.datasetSlug }}",
                  "timestoreAuthToken": "{{ trigger.metadata.timestore.authToken }}",
                  "plotsDir": "{{ trigger.metadata.paths.plotsDir }}",
                  "reportsDir": "{{ trigger.metadata.paths.reportsDir }}",
                  "metastoreBaseUrl": "{{ trigger.metadata.metastore.baseUrl }}",
                  "metastoreNamespace": "{{ trigger.metadata.metastore.namespace }}",
                  "metastoreAuthToken": "{{ trigger.metadata.metastore.authToken }}"
                },
                "metadata": {
                  "timestore": {
                    "baseUrl": "{{ defaultParameters.timestoreBaseUrl }}",
                    "datasetSlug": "{{ defaultParameters.timestoreDatasetSlug }}",
                    "authToken": "{{ defaultParameters.timestoreAuthToken }}"
                  },
                  "paths": {
                    "plotsDir": "{{ defaultParameters.plotsDir }}",
                    "reportsDir": "{{ defaultParameters.reportsDir }}"
                  },
                  "metastore": {
                    "baseUrl": "{{ defaultParameters.metastoreBaseUrl }}",
                    "namespace": "{{ defaultParameters.metastoreNamespace }}",
                    "authToken": "{{ defaultParameters.metastoreAuthToken }}"
                  }
                },
                "throttleWindowMs": 60000,
                "throttleCount": 5,
                "maxConcurrency": 2,
                "idempotencyKeyExpression": "{{ event.payload.partitionKey.window | default: event.payload.partitionKey }}",
                "status": "active"
              }
            ]
          }
        }
      },
      "includes": [
        "observatory-visualization-runner-job",
        "observatory-report-publisher-job",
        "observatory-minute-ingest-workflow"
      ],
      "analyticsTag": "workflow__observatory_daily_publication"
    },
    {
      "id": "observatory-scenario-pack",
      "type": "scenario",
      "title": "Environmental observatory (event-driven)",
      "summary": "Loads the end-to-end observatory example with schedules and triggers prewired.",
      "description": "Prefills the importer with the watcher + dashboard services, supporting jobs, and the event-driven observatory workflows so you can replay the one-click demo with schedules and event triggers applied automatically.",
      "tags": [
        "observatory",
        "end-to-end",
        "event-driven"
      ],
      "includes": [
        "observatory-file-watcher-service",
        "observatory-file-watcher-app",
        "observatory-dashboard-app",
        "observatory-data-generator-job",
        "observatory-inbox-normalizer-job",
        "observatory-timestore-loader-job",
        "observatory-visualization-runner-job",
        "observatory-report-publisher-job",
        "observatory-minute-data-generator-workflow",
        "observatory-minute-ingest-workflow",
        "observatory-daily-publication-workflow"
      ],
      "focus": "workflows",
      "analyticsTag": "bundle__observatory"
    },
    {
      "id": "directory-insights-report-workflow",
      "type": "workflow",
      "title": "Directory insights report",
      "summary": "Scans directories and renders interactive reports.",
      "description": "Imports the `directory-insights-report` workflow definition. It runs the scan and visualization jobs to emit the `directory.insights.report` asset.",
      "difficulty": "intermediate",
      "tags": [
        "directory insights",
        "reporting"
      ],
      "docs": [
        {
          "label": "Directory insights walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/directory-insights-workflow.md"
        }
      ],
      "assets": [
        {
          "label": "Workflow definition reference",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/directory-insights/workflows/directory-insights-report.json"
        }
      ],
      "form": {
        "slug": "directory-insights-report",
        "name": "Directory Insights Report",
        "version": 1,
        "description": "Scans a filesystem tree and renders HTML/JSON/Markdown insights.",
        "parametersSchema": {
          "type": "object",
          "properties": {
            "scanDir": {
              "type": "string",
              "minLength": 1
            },
            "outputDir": {
              "type": "string",
              "minLength": 1
            },
            "maxEntries": {
              "type": "number",
              "minimum": 1000,
              "maximum": 200000
            },
            "reportTitle": {
              "type": "string"
            }
          },
          "required": [
            "scanDir",
            "outputDir"
          ]
        },
        "defaultParameters": {
          "maxEntries": 20000,
          "reportTitle": "Directory Visualization Report"
        },
        "steps": [
          {
            "id": "scan",
            "name": "Scan directory",
            "type": "job",
            "jobSlug": "scan-directory",
            "parameters": {
              "scanDir": "{{ parameters.scanDir }}",
              "maxEntries": "{{ parameters.maxEntries }}"
            },
            "storeResultAs": "scanResults"
          },
          {
            "id": "report",
            "name": "Generate Visualization",
            "type": "job",
            "jobSlug": "generate-visualizations",
            "dependsOn": [
              "scan"
            ],
            "parameters": {
              "scanData": "{{ shared.scanResults }}",
              "outputDir": "{{ parameters.outputDir }}",
              "reportTitle": "{{ parameters.reportTitle }}"
            },
            "storeResultAs": "visualization",
            "produces": [
              {
                "assetId": "directory.insights.report",
                "schema": {
                  "type": "object",
                  "properties": {
                    "outputDir": {
                      "type": "string"
                    },
                    "reportTitle": {
                      "type": "string"
                    },
                    "rootPath": {
                      "type": "string"
                    },
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "summary": {
                      "type": "object"
                    },
                    "artifacts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "relativePath": {
                            "type": "string"
                          },
                          "mediaType": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "sizeBytes": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "relativePath",
                          "mediaType",
                          "sizeBytes"
                        ]
                      }
                    }
                  },
                  "required": [
                    "outputDir",
                    "reportTitle",
                    "generatedAt",
                    "artifacts"
                  ]
                }
              }
            ]
          }
        ],
        "triggers": [
          {
            "type": "manual"
          }
        ]
      },
      "includes": [
        "scan-directory-job",
        "generate-visualizations-job"
      ],
      "analyticsTag": "workflow__directory_insights_report"
    },
    {
      "id": "directory-insights-archive-workflow",
      "type": "workflow",
      "title": "Directory insights archive",
      "summary": "Archives directory insight artifacts into compressed bundles.",
      "description": "Imports the `directory-insights-archive` workflow definition to package visualization artifacts into a tarball and emit the `directory.insights.archive` asset.",
      "difficulty": "beginner",
      "tags": [
        "directory insights",
        "automation"
      ],
      "docs": [
        {
          "label": "Directory insights archive guide",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/directory-insights-archive-workflow.md"
        }
      ],
      "assets": [
        {
          "label": "Workflow definition reference",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/directory-insights/workflows/directory-insights-archive.json"
        }
      ],
      "form": {
        "slug": "directory-insights-archive",
        "name": "Directory Insights Archive",
        "version": 1,
        "description": "Compresses the directory insights report artifacts into a tarball.",
        "parametersSchema": {
          "type": "object",
          "required": [
            "reportAsset",
            "archiveDir"
          ],
          "properties": {
            "reportAsset": {
              "type": "object"
            },
            "archiveDir": {
              "type": "string",
              "minLength": 1
            },
            "archiveName": {
              "type": "string",
              "minLength": 1
            }
          }
        },
        "defaultParameters": {
          "archiveDir": "examples/directory-insights/data/archives",
          "reportAsset": {
            "assetId": "directory.insights.report",
            "outputDir": "examples/directory-insights/data/output",
            "artifacts": [
              {
                "relativePath": "scan-data.json"
              },
              {
                "relativePath": "index.html"
              },
              {
                "relativePath": "summary.md"
              }
            ]
          }
        },
        "steps": [
          {
            "id": "zip-report",
            "name": "Archive report artifacts",
            "type": "job",
            "jobSlug": "archive-report",
            "parameters": {
              "reportDir": "{{ parameters.reportAsset.outputDir }}",
              "archiveDir": "{{ parameters.archiveDir }}",
              "archiveName": "{{ parameters.archiveName }}",
              "asset": "{{ parameters.reportAsset }}"
            },
            "consumes": [
              {
                "assetId": "directory.insights.report"
              }
            ],
            "produces": [
              {
                "assetId": "directory.insights.archive",
                "autoMaterialize": {
                  "onUpstreamUpdate": true,
                  "parameterDefaults": {
                    "archiveDir": "examples/directory-insights/data/archives",
                    "reportAsset": {
                      "assetId": "directory.insights.report",
                      "outputDir": "examples/directory-insights/data/output",
                      "artifacts": [
                        {
                          "relativePath": "scan-data.json"
                        },
                        {
                          "relativePath": "index.html"
                        },
                        {
                          "relativePath": "summary.md"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "required": [
                    "archivePath",
                    "generatedAt",
                    "artifactCount"
                  ],
                  "properties": {
                    "archivePath": {
                      "type": "string"
                    },
                    "archiveDir": {
                      "type": "string"
                    },
                    "archiveName": {
                      "type": "string"
                    },
                    "sourceAssetId": {
                      "type": "string"
                    },
                    "sourceOutputDir": {
                      "type": "string"
                    },
                    "reportTitle": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "artifactCount": {
                      "type": "number"
                    },
                    "artifacts": {
                      "type": "array"
                    }
                  }
                }
              }
            ]
          }
        ],
        "triggers": [
          {
            "type": "manual"
          }
        ]
      },
      "includes": [
        "archive-report-job",
        "directory-insights-report-workflow"
      ],
      "analyticsTag": "workflow__directory_insights_archive"
    },
    {
      "id": "fleet-telemetry-daily-rollup-workflow",
      "type": "workflow",
      "title": "Fleet telemetry daily rollup",
      "summary": "Creates dynamic telemetry partitions and propagates freshness metadata.",
      "description": "Imports the `fleet-telemetry-daily-rollup` workflow definition. It executes the metrics job with templated parameters, registers `greenhouse.telemetry.instrument` as a dynamic asset, and keeps freshness targets aligned while emitting JSON rollups.",
      "difficulty": "intermediate",
      "tags": [
        "fleet telemetry",
        "dynamic partitions"
      ],
      "docs": [
        {
          "label": "Fleet telemetry walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/fleet-telemetry-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Workflow definition reference",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/fleet-telemetry/workflows/fleet-telemetry-daily-rollup.json"
        }
      ],
      "form": {
        "slug": "fleet-telemetry-daily-rollup",
        "name": "Fleet Telemetry Daily Rollup",
        "version": 1,
        "description": "Aggregates instrument CSV readings into partitioned telemetry assets.",
        "parametersSchema": {
          "type": "object",
          "properties": {
            "dataRoot": {
              "type": "string",
              "minLength": 1
            },
            "instrumentId": {
              "type": "string",
              "minLength": 1
            },
            "day": {
              "type": "string",
              "minLength": 1
            },
            "temperatureLimitC": {
              "type": "number"
            },
            "humidityLimitPct": {
              "type": "number"
            },
            "outputDir": {
              "type": "string",
              "minLength": 1
            }
          },
          "required": [
            "dataRoot",
            "instrumentId",
            "day",
            "outputDir"
          ]
        },
        "defaultParameters": {
          "temperatureLimitC": 30,
          "humidityLimitPct": 65,
          "outputDir": "examples/fleet-telemetry/data/rollups"
        },
        "steps": [
          {
            "id": "compute-telemetry",
            "name": "Compute telemetry rollup",
            "type": "job",
            "jobSlug": "fleet-telemetry-metrics",
            "parameters": {
              "dataRoot": "{{ parameters.dataRoot }}",
              "instrumentId": "{{ parameters.instrumentId }}",
              "day": "{{ parameters.day }}",
              "temperatureLimitC": "{{ parameters.temperatureLimitC }}",
              "humidityLimitPct": "{{ parameters.humidityLimitPct }}",
              "outputDir": "{{ parameters.outputDir }}"
            },
            "storeResultAs": "instrumentTelemetry",
            "produces": [
              {
                "assetId": "greenhouse.telemetry.instrument",
                "partitioning": {
                  "type": "dynamic",
                  "maxKeys": 1000,
                  "retentionDays": 120
                },
                "freshness": {
                  "ttlMs": 86400000
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "partitionKey": {
                      "type": "string"
                    },
                    "instrumentId": {
                      "type": "string"
                    },
                    "day": {
                      "type": "string"
                    },
                    "aggregatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "sourceFiles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "relativePath": {
                            "type": "string"
                          },
                          "samples": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "relativePath"
                        ]
                      }
                    },
                    "metrics": {
                      "type": "object",
                      "properties": {
                        "samples": {
                          "type": "number"
                        },
                        "temperatureC": {
                          "type": "object",
                          "properties": {
                            "min": {
                              "type": "number"
                            },
                            "max": {
                              "type": "number"
                            },
                            "mean": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "min",
                            "max",
                            "mean"
                          ]
                        },
                        "humidityPct": {
                          "type": "object",
                          "properties": {
                            "min": {
                              "type": "number"
                            },
                            "max": {
                              "type": "number"
                            },
                            "mean": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "min",
                            "max",
                            "mean"
                          ]
                        }
                      },
                      "required": [
                        "samples",
                        "temperatureC",
                        "humidityPct"
                      ]
                    },
                    "anomalyWindow": {
                      "type": "object",
                      "properties": {
                        "flagged": {
                          "type": "boolean"
                        },
                        "reason": {
                          "type": "string"
                        },
                        "firstSample": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "lastSample": {
                          "type": "string",
                          "format": "date-time"
                        }
                      },
                      "required": [
                        "flagged"
                      ]
                    }
                  },
                  "required": [
                    "partitionKey",
                    "instrumentId",
                    "aggregatedAt",
                    "metrics"
                  ]
                }
              }
            ]
          }
        ],
        "triggers": [
          {
            "type": "manual"
          }
        ]
      },
      "includes": [
        "fleet-telemetry-metrics-job"
      ],
      "analyticsTag": "workflow__fleet_telemetry_rollup"
    },
    {
      "id": "fleet-telemetry-alerts-workflow",
      "type": "workflow",
      "title": "Fleet telemetry alerts",
      "summary": "Monitors telemetry rollups and triggers greenhouse alerts.",
      "description": "Imports the `fleet-telemetry-alerts` workflow definition. It consumes the telemetry asset, materialises alert snapshots, and demonstrates auto-materialize rules reacting to upstream updates.",
      "difficulty": "intermediate",
      "tags": [
        "fleet telemetry",
        "auto-materialize"
      ],
      "docs": [
        {
          "label": "Fleet telemetry walkthrough",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/docs/fleet-telemetry-workflows.md"
        }
      ],
      "assets": [
        {
          "label": "Workflow definition reference",
          "href": "https://github.com/benediktbwimmer/apphub/blob/main/examples/fleet-telemetry/workflows/fleet-telemetry-alerts.json"
        }
      ],
      "form": {
        "slug": "fleet-telemetry-alerts",
        "name": "Fleet Telemetry Alerts",
        "version": 1,
        "description": "Evaluates telemetry partitions and raises greenhouse alerts when thresholds are breached.",
        "parametersSchema": {
          "type": "object",
          "properties": {
            "telemetryDir": {
              "type": "string",
              "minLength": 1
            },
            "windowHours": {
              "type": "number",
              "minimum": 1,
              "maximum": 168
            },
            "temperatureLimitC": {
              "type": "number"
            },
            "humidityLimitPct": {
              "type": "number"
            }
          },
          "required": [
            "telemetryDir",
            "windowHours"
          ]
        },
        "defaultParameters": {
          "telemetryDir": "examples/fleet-telemetry/data/rollups",
          "windowHours": 24,
          "temperatureLimitC": 30,
          "humidityLimitPct": 65
        },
        "steps": [
          {
            "id": "scan-instruments",
            "name": "Scan instrument telemetry",
            "type": "job",
            "jobSlug": "greenhouse-alerts-runner",
            "parameters": {
              "telemetryDir": "{{ parameters.telemetryDir }}",
              "windowHours": "{{ parameters.windowHours }}",
              "temperatureLimitC": "{{ parameters.temperatureLimitC }}",
              "humidityLimitPct": "{{ parameters.humidityLimitPct }}"
            },
            "consumes": [
              {
                "assetId": "greenhouse.telemetry.instrument"
              }
            ],
            "produces": [
              {
                "assetId": "greenhouse.telemetry.alerts",
                "autoMaterialize": {
                  "onUpstreamUpdate": true,
                  "priority": 6,
                  "parameterDefaults": {
                    "windowHours": 24
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "windowHours": {
                      "type": "number"
                    },
                    "temperatureLimitC": {
                      "type": "number"
                    },
                    "humidityLimitPct": {
                      "type": "number"
                    },
                    "totalPartitions": {
                      "type": "number"
                    },
                    "flaggedInstruments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "partitionKey": {
                            "type": "string"
                          },
                          "instrumentId": {
                            "type": "string"
                          },
                          "reason": {
                            "type": "string"
                          },
                          "lastReadingAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "latestMetrics": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "partitionKey",
                          "instrumentId",
                          "reason"
                        ]
                      }
                    }
                  },
                  "required": [
                    "generatedAt",
                    "flaggedInstruments"
                  ]
                }
              }
            ]
          }
        ],
        "triggers": [
          {
            "type": "manual"
          }
        ]
      },
      "includes": [
        "fleet-telemetry-metrics-job",
        "greenhouse-alerts-runner-job",
        "fleet-telemetry-daily-rollup-workflow"
      ],
      "analyticsTag": "workflow__fleet_telemetry_alerts"
    },
    {
      "id": "fleet-telemetry-scenario-pack",
      "type": "scenario",
      "title": "Fleet telemetry demo",
      "summary": "Loads jobs and workflows required to replay the fleet telemetry walkthrough.",
      "description": "Prefills the job importer with the metrics and alerts bundles, loads both workflow definitions, and keeps everything focused on the workflow tab so you can validate dependencies in one pass.",
      "tags": [
        "fleet telemetry",
        "end-to-end"
      ],
      "includes": [
        "fleet-telemetry-metrics-job",
        "greenhouse-alerts-runner-job",
        "fleet-telemetry-daily-rollup-workflow",
        "fleet-telemetry-alerts-workflow"
      ],
      "focus": "workflows",
      "analyticsTag": "bundle__fleet_telemetry"
    },
    {
      "id": "all-examples-scenario-pack",
      "type": "scenario",
      "title": "Load every example",
      "summary": "Applies all service, app, job, and workflow examples in one click.",
      "description": "Populates the import workspace with every curated example shipped in this repository. Useful when seeding a fresh environment or demo workspace.",
      "tags": [
        "quickstart"
      ],
      "includes": [
        "observatory-file-watcher-service",
        "observatory-file-watcher-app",
        "observatory-dashboard-app",
        "scan-directory-job",
        "generate-visualizations-job",
        "archive-report-job",
        "observatory-inbox-normalizer-job",
        "observatory-timestore-loader-job",
        "observatory-visualization-runner-job",
        "observatory-report-publisher-job",
        "file-relocator-job",
        "retail-sales-csv-loader-job",
        "retail-sales-parquet-job",
        "retail-sales-visualizer-job",
        "fleet-telemetry-metrics-job",
        "greenhouse-alerts-runner-job",
        "file-drop-relocation-workflow",
        "retail-sales-daily-ingest-workflow",
        "retail-sales-insights-workflow",
        "fleet-telemetry-daily-rollup-workflow",
        "fleet-telemetry-alerts-workflow",
        "observatory-minute-ingest-workflow",
        "observatory-daily-publication-workflow",
        "directory-insights-report-workflow",
        "directory-insights-archive-workflow"
      ],
      "focus": "workflows",
      "analyticsTag": "bundle__all_examples"
    }
  ]
}
